Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 1
prog.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4				     org 100h
      5
      6				     include ..\macros.asm
1     7
1     8				     EOP     macro
1     9						     mov ax, 4c00h
1    10						     int 21h
1    11					     endm		     ; end of program
1    12
     13
     14	0100  E9 03AC		     Start:	     jmp main
     15
     16				     include ..\3-FUNCS\LIB.ASM
1    17				     ;--------------------------------------
1    18				     ; Counts string length
1    19				     ;
1    20				     ; word cdecl mystrlen(const byte* s)
1    21				     ;	     return ax;
1    22				     ;
1    23				     ; Assumes:
1    24				     ;
1    25				     ; Destr: ax, cx, es
1    26				     ;--------------------------------------
1    27
1    28	0103			     mystrlen	     proc
1    29
1    30	0103  55				     push bp
1    31	0104  8B EC				     mov bp, sp
1    32
1    33	0106  8C D8				     mov ax, ds
1    34	0108  8E C0				     mov es, ax	      ;	es = ds
1    35	010A  8B 7E 04				     mov di, [bp + 4] ;	di = offset s
1    36
1    37	010D  B9 FFFF				     mov cx, -1
1    38	0110  B0 24				     mov al, '$'
1    39	0112  F2> AE				     repne scasb
1    40
1    41	0114  F7 D9				     neg cx
1    42	0116  83 E9 02				     sub cx, 2
1    43	0119  8B C1				     mov ax, cx
1    44
1    45	011B  5D				     pop bp
1    46	011C  C3				     ret
1    47	011D					     endp
1    48				     ;--------------------------------------
1    49
1    50				     ;--------------------------------------
1    51				     ; Finds byte
1    52				     ;
1    53				     ; byte* cdecl mymemchr(const byte*	s, byte	c, word	n)
1    54				     ;	     return es:ax;
1    55				     ;
1    56				     ; Assumes:
1    57				     ;
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 2
prog.asm



1    58				     ; Destr: ax, cx, es
1    59				     ;--------------------------------------
1    60
1    61	011D			     mymemchr	     proc
1    62
1    63	011D  55				     push bp
1    64	011E  8B EC				     mov bp, sp
1    65
1    66	0120  8C D8				     mov ax, ds
1    67	0122  8E C0				     mov es, ax	      ;	es = ds
1    68
1    69
1    70	0124  8B 7E 04				     mov di, [bp + 4] ;	di = offset s
1    71
1    72
1    73	0127  8A 46 06				     mov al, [bp + 6] ;	al = c
1    74	012A  8B 4E 08				     mov cx, [bp + 8]
1    75	012D  41				     inc cx	      ;	cx = n + 1
1    76	012E  F2> AE				     repne scasb
1    77
1    78	0130  83 F9 00				     cmp cx, 0
1    79	0133  75 06				     jne @@IsFound
1    80	0135  B8 0000				     mov ax, 0
1    81	0138  EB 04 90				     jmp @@IsNotFound
1    82	013B			     @@IsFound:
1    83	013B  8D 45 FF				     lea ax, [di - 1]
1    84	013E			     @@IsNotFound:
1    85
1    86	013E  5D				     pop bp
1    87	013F  C3				     ret
1    88	0140					     endp
1    89				     ;--------------------------------------
1    90
1    91				     ;--------------------------------------
1    92				     ; Sets n bytes of memory with c
1    93				     ;
1    94				     ; byte* cdecl mymemset(const byte*	p, byte	c, word	n)
1    95				     ;	     return p;
1    96				     ;
1    97				     ; Assumes:
1    98				     ;
1    99				     ; Destr: ax, cx, es
1   100				     ;--------------------------------------
1   101
1   102	0140			     mymemset	     proc
1   103
1   104	0140  55				     push bp
1   105	0141  8B EC				     mov bp, sp
1   106
1   107	0143  8C D8				     mov ax, ds
1   108	0145  8E C0				     mov es, ax	      ;	es = ds
1   109
1   110	0147  8B 7E 04				     mov di, [bp + 4] ;	di = offset s
1   111
1   112	014A  8A 46 06				     mov al, [bp + 6] ;	al = c
1   113	014D  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   114	0150  F3> AA				     rep stosb
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 3
prog.asm



1   115
1   116	0152  8B 46 04				     mov ax, [bp + 4]
1   117
1   118	0155  5D				     pop bp
1   119	0156  C3				     ret
1   120	0157					     endp
1   121				     ;--------------------------------------
1   122
1   123				     ;--------------------------------------
1   124				     ; Copies n	bytes of src to	dest
1   125				     ;
1   126				     ; byte* cdecl mymemcpy(byte* dest,	const byte* src, word n)
1   127				     ;	     return dest;
1   128				     ;
1   129				     ; Assumes:
1   130				     ;
1   131				     ; Destr: ax, cx, es, si
1   132				     ;--------------------------------------
1   133
1   134	0157			     mymemcpy	     proc
1   135
1   136	0157  55				     push bp
1   137	0158  8B EC				     mov bp, sp
1   138
1   139	015A  8C D8				     mov ax, ds
1   140	015C  8E C0				     mov es, ax	      ;	es = ds
1   141
1   142	015E  8B 7E 04				     mov di, [bp + 4] ;	di = offset dest
1   143
1   144	0161  8B 76 06				     mov si, [bp + 6] ;	si = offset src
1   145	0164  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   146	0167  F3> A4				     rep movsb
1   147
1   148	0169  8B 46 04				     mov ax, [bp + 4]
1   149
1   150	016C  5D				     pop bp
1   151	016D  C3				     ret
1   152	016E					     endp
1   153				     ;--------------------------------------
1   154
1   155				     ;--------------------------------------
1   156				     ; Copies n	bytes of src to	dest. Also handles overlay
1   157				     ;
1   158				     ; byte* cdecl mymemmove(byte* dest, const byte* src, word n)
1   159				     ;	     return dest;
1   160				     ;
1   161				     ; Assumes:
1   162				     ;
1   163				     ; Destr: ax, cx, es, si
1   164				     ;--------------------------------------
1   165
1   166	016E			     mymemmove	     proc
1   167
1   168	016E  55				     push bp
1   169	016F  8B EC				     mov bp, sp
1   170
1   171	0171  8C D8				     mov ax, ds
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 4
prog.asm



1   172	0173  8E C0				     mov es, ax	      ;	es = ds
1   173
1   174	0175  8B 7E 04				     mov di, [bp + 4] ;	di = offset dest
1   175
1   176	0178  8B 76 06				     mov si, [bp + 6] ;	si = offset src
1   177	017B  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   178
1   179						     ; if (src < dest && dest <	src + n)
1   180	017E  3B F7				     cmp si, di
1   181	0180  73 15				     jae @@else
1   182
1   183	0182  8B C6				     mov ax, si
1   184	0184  03 C1				     add ax, cx
1   185	0186  3B F8				     cmp di, ax
1   186	0188  73 0D				     jae @@else
1   187
1   188	018A  03 F9				     add di, cx	; di +=	n - 1
1   189	018C  4F				     dec di
1   190	018D  03 F1				     add si, cx	; si +=	n - 1
1   191	018F  4E				     dec si
1   192	0190  FD				     std
1   193	0191  F3> A4				     rep movsb
1   194	0193  FC				     cld
1   195	0194  EB 03 90				     jmp @@endif
1   196
1   197	0197  F3> A4		     @@else:	     rep movsb
1   198	0199			     @@endif:
1   199
1   200	0199  8B 46 04				     mov ax, [bp + 4]
1   201
1   202	019C  5D				     pop bp
1   203	019D  C3				     ret
1   204	019E					     endp
1   205				     ;--------------------------------------
1   206
1   207				     ;--------------------------------------
1   208				     ; Compares	n bytes
1   209				     ;
1   210				     ; word cdecl mymemcmp(const byte* buf1, const byte* buf2, word n)
1   211				     ;	     return ax;
1   212				     ;
1   213				     ; Assumes:
1   214				     ;
1   215				     ; Destr: ax, cx, es
1   216				     ;--------------------------------------
1   217
1   218	019E			     mymemcmp	     proc
1   219
1   220	019E  55				     push bp
1   221	019F  8B EC				     mov bp, sp
1   222
1   223	01A1  8C D8				     mov ax, ds
1   224	01A3  8E C0				     mov es, ax	      ;	es = ds
1   225	01A5  8B 7E 04				     mov di, [bp + 4] ;	di = offset buf1
1   226	01A8  8B 76 06				     mov si, [bp + 6] ;	si = offset buf2
1   227	01AB  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   228
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 5
prog.asm



1   229	01AE  F3> A6				     repe CMPSB
1   230
1   231	01B0  32 C0				     xor al, al
1   232	01B2  26: 8A 65	FF			     mov ah, es:[di - 1]
1   233	01B6  2A 64 FF				     sub ah, ds:[si - 1]
1   234
1   235	01B9  5D				     pop bp
1   236	01BA  C3				     ret
1   237	01BB					     endp
1   238				     ;--------------------------------------
1   239
    240
    241	      =0050		     ScreenWidth     equ 80
    242	      =001A		     ScreenHeight    equ 26
    243
    244	      =0087		     ShadowAttrMask  equ 10000111b
    245
    246	      =0020		     Space	     equ ' '
    247	      =000D		     NewLine	     equ 0dh
    248
    249	      =0005		     FrameBegLine    equ 5
    250	      =0014		     FrameBegCol     equ 20
    251
    252	      =0080		     ArgcAddr	     equ 0080h
    253	      =0081		     ArgvAddr	     equ 0081h
    254
    255				     ;--------------------------------------
    256				     ; Draws symbol
    257				     ; Entry:	     dh	- line num
    258				     ;		     dl	- col num
    259				     ;		     cl	- symbol
    260				     ;		     ch	- attr
    261				     ; Assumes:	     es	= 0b800h
    262				     ; Destr:	     ax, bx
    263				     ;--------------------------------------
    264	01BB			     DrawSymbol	     proc
    265
    266	01BB  8A C6				     mov al, dh
    267	01BD  B3 50				     mov bl, ScreenWidth
    268	01BF  F6 E3				     mul bl	; ax = dh * ScreenWidth
    269
    270	01C1  33 DB				     xor bx, bx
    271	01C3  8A DA				     mov bl, dl
    272	01C5  03 C3				     add ax, bx	; ax +=	dl (col	num)
    273
    274	01C7  D1 E0				     shl ax, 1 ; ax *= 2
    275
    276	01C9  8B D8				     mov bx, ax
    277	01CB  26: 89 0F				     mov word ptr es:[bx], cx
    278
    279	01CE  C3				     ret
    280	01CF					     endp
    281				     ;--------------------------------------
    282
    283				     ;--------------------------------------
    284				     ; Draws symbol wirhout changing attributes
    285				     ; Entry:	     dh	- line num
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 6
prog.asm



    286				     ;		     dl	- col num
    287				     ;		     cl	- symbol
    288				     ; Assumes:	     es	= 0b800h
    289				     ; Destr:	     ax, bx
    290				     ;--------------------------------------
    291	01CF			     ModSymbol	     proc
    292
    293	01CF  8A C6				     mov al, dh
    294	01D1  B3 50				     mov bl, ScreenWidth
    295	01D3  F6 E3				     mul bl	; ax = dh * ScreenWidth
    296
    297	01D5  33 DB				     xor bx, bx
    298	01D7  8A DA				     mov bl, dl
    299	01D9  03 C3				     add ax, bx	; ax +=	dl (col	num)
    300
    301	01DB  D1 E0				     shl ax, 1 ; ax *= 2
    302
    303	01DD  8B D8				     mov bx, ax
    304	01DF  26: 88 0F				     mov byte ptr es:[bx], cl
    305
    306	01E2  C3				     ret
    307	01E3					     endp
    308				     ;--------------------------------------
    309
    310				     ;--------------------------------------
    311				     ; Modifies	symbol attr (applies & operation with attr mask)
    312				     ; Entry:	     dh	- line num
    313				     ;		     dl	- col num
    314				     ;		     ch	- attr mask
    315				     ; Assumes:	     es	= 0b800h
    316				     ; Destr:	     ax, bx
    317				     ;--------------------------------------
    318	01E3			     ModSymbolAttr   proc
    319
    320	01E3  52				     push dx
    321
    322	01E4  8A C6				     mov al, dh
    323	01E6  B3 50				     mov bl, ScreenWidth
    324	01E8  F6 E3				     mul bl	; ax = dh * ScreenWidth
    325
    326	01EA  32 F6				     xor dh, dh
    327	01EC  03 C2				     add ax, dx	; ax +=	dl (col	num)
    328
    329	01EE  D1 E0				     shl ax, 1 ; ax *= 2
    330
    331	01F0  8B D8				     mov bx, ax
    332	01F2  43				     inc bx ; attr address
    333
    334	01F3  26: 20 2F				     and byte ptr es:[bx], ch
    335
    336	01F6  5A				     pop dx
    337	01F7  C3				     ret
    338	01F8					     endp
    339				     ;--------------------------------------
    340
    341				     ;--------------------------------------
    342				     ; Draws frame (const byte*	style_str, word	width_height, byte color)
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 7
prog.asm



    343				     ; Entry:
    344				     ; Assumes:	     es	= 0b800h
    345				     ; Destr:	     ax, bx, cx, dx
    346				     ;--------------------------------------
    347	01F8			     DrawFrame	     proc
    348
    349	01F8  55				     push bp
    350	01F9  8B EC				     mov bp, sp
    351
    352						     ; init attr
    353	01FB  8A 6E 08				     mov ch, [bp + 8]
    354
    355	01FE  B6 05				     mov dh, FrameBegLine
    356
    357						     ; top empty line
    358	0200  FF 76 06				     push [bp +	6]
    359	0203  E8 003D				     call DrawFrameEmptyLine
    360						     ; [bp + 6]	is used	in next	call
    361	0206  FE C6				     inc dh
    362
    363						     ; top line
    364	0208  FF 76 04				     push [bp +	4]
    365	020B  E8 004E				     call DrawFrameLine
    366	020E  83 C4 02				     add sp, 2 ; [bp + 6] is used in next call
    367
    368						     ; middle lines
    369	0211  8B 46 04				     mov ax, [bp + 4]
    370	0214  05 0003				     add ax, 3
    371	0217  50				     push ax
    372
    373	0218  FE C6		     DFWhile:	     inc dh
    374	021A  8A 5E 07				     mov bl, [bp + 7]
    375	021D  80 C3 02				     add bl, FrameBegLine - 3
    376	0220  3A F3				     cmp dh, bl
    377	0222  77 05				     ja	DFWhileEnd
    378
    379	0224  E8 0035				     call DrawFrameLine
    380	0227  EB EF				     jmp DFWhile
    381	0229			     DFWhileEnd:
    382	0229  83 C4 02				     add sp, 2 ; [bp + 6] is used in next call
    383
    384						     ; bottom line
    385	022C  8B 46 04				     mov ax, [bp + 4]
    386	022F  05 0006				     add ax, 6
    387	0232  50				     push ax
    388	0233  E8 0026				     call DrawFrameLine
    389	0236  83 C4 02				     add sp, 2 ; [bp + 6] is used in next call
    390	0239  FE C6				     inc dh
    391
    392						     ; bottom empty line
    393	023B  E8 0005				     call DrawFrameEmptyLine
    394	023E  83 C4 02				     add sp, 2
    395
    396	0241  5D				     pop bp
    397	0242  C3				     ret
    398	0243					     endp
    399				     ;---------------------------------------
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 8
prog.asm



    400
    401				     ;---------------------------------------
    402				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    403				     ; DrawDrameEmptyLine (word	width)
    404				     ;
    405				     ; RegEntry:     ch	= color	attr
    406				     ;		     dh	= line num
    407				     ; Assumes:	     es	= 0b800h
    408				     ;		     ds	allows to reach	style_str
    409				     ;
    410				     ; Destr:	     ax, bx, cl, dl
    411				     ;--------------------------------------
    412	0243			     DrawFrameEmptyLine	     proc
    413
    414	0243  55				     push bp
    415	0244  8B EC				     mov bp, sp
    416
    417	0246  B1 20				     mov cl, Space
    418	0248  B2 14				     mov dl, FrameBegCol
    419
    420						     ; while (dl++ < FrameWidth	+ FrameBegCol -	1):
    421						     ;	     DrawSymbol()
    422	024A  8A 46 04		     DFLEwhile:	     mov al, [bp + 4]
    423	024D  04 13				     add al, FrameBegCol - 1
    424	024F  3A D0				     cmp dl, al
    425	0251  77 07				     ja	DFLEwhileEnd
    426
    427	0253  E8 FF65				     call DrawSymbol
    428
    429	0256  FE C2				     inc dl
    430	0258  EB F0				     jmp DFLEwhile
    431	025A			     DFLEwhileEnd:
    432
    433	025A  5D				     pop bp
    434	025B  C3				     ret
    435	025C					     endp
    436
    437				     ;--------------------------------------
    438
    439				     ;--------------------------------------
    440				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    441				     ; DrawDrameLine (const byte* style_str, word width_height)
    442				     ;
    443				     ; RegEntry:     ch	= color	attr
    444				     ; Assumes:	     es	= 0b800h
    445				     ;		     ds	allows to reach	style_str
    446				     ;
    447				     ; Destr:	     ax, bx, cl, dl
    448				     ;-------------------------------------
    449
    450	025C			     DrawFrameLine   proc
    451
    452	025C  55				     push bp
    453	025D  8B EC				     mov bp, sp
    454
    455						     ; write empty symbol
    456	025F  B2 14				     mov dl, FrameBegCol
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 9
prog.asm



    457	0261  B1 20				     mov cl, Space
    458	0263  E8 FF55				     call DrawSymbol
    459
    460						     ; write left symbol
    461	0266  FE C2				     inc dl
    462	0268  8B 5E 04				     mov bx, [bp + 4]
    463	026B  8A 0F				     mov cl, [bx]
    464	026D  E8 FF4B				     call DrawSymbol
    465
    466						     ; write middle symbols
    467	0270  8B 5E 04				     mov bx, [bp + 4]
    468	0273  8A 4F 01				     mov cl, [bx + 1]
    469
    470						     ; while (dl++ < FrameWidth	- 4 + (FrameBegCol + 1)):
    471						     ;	     DrawSymbol()
    472	0276  FE C2		     DFLwhile:	     inc dl
    473	0278  8A 46 06				     mov al, [bp + 6]
    474	027B  04 11				     add al, (FrameBegCol + 1) - 4
    475	027D  3A D0				     cmp dl, al
    476	027F  77 05				     ja	DFLwhileEnd
    477
    478	0281  E8 FF37				     call DrawSymbol
    479
    480	0284  EB F0				     jmp DFLWhile
    481	0286			     DFLwhileEnd:
    482						     ; write right symbol
    483	0286  8B 5E 04				     mov bx, [bp + 4]
    484	0289  8A 4F 02				     mov cl, [bx + 2]
    485	028C  E8 FF2C				     call DrawSymbol
    486
    487						     ; write empty symbol
    488	028F  FE C2				     inc dl
    489	0291  B1 20				     mov cl, Space
    490	0293  E8 FF25				     call DrawSymbol
    491
    492	0296  5D				     pop bp
    493	0297  C3				     ret
    494	0298					     endp
    495
    496				     ;--------------------------------------
    497
    498				     ;--------------------------------------
    499				     ; Draws shadow
    500				     ; DrawShadow (word	width_height)
    501				     ; Entry:
    502				     ; Assumes:	     es	= 0b800h
    503				     ;
    504				     ; Destr: ax, bx, cx, dx
    505				     ;--------------------------------------
    506	0298			     DrawShadow	     proc
    507
    508	0298  55				     push bp
    509	0299  8B EC				     mov bp, sp
    510
    511	029B  B5 87				     mov ch, ShadowAttrMask
    512	029D  B6 06				     mov dh, FrameBegLine + 1
    513	029F  B2 14				     mov dl, FrameBegCol
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 10
prog.asm



    514	02A1  02 56 04				     add dl, [bp + 4]
    515
    516	02A4  B1 05				     mov cl, FrameBegLine
    517	02A6  02 4E 05				     add cl, [bp + 5] ;	FrameHeight
    518	02A9  3A F1		     DSvertWhile:    cmp dh, cl
    519	02AB  77 0E				     ja	DSvertWhileEnd
    520
    521	02AD  E8 FF33				     call ModSymbolAttr
    522	02B0  FE C2				     inc dl
    523	02B2  E8 FF2E				     call ModSymbolAttr
    524	02B5  FE CA				     dec dl
    525
    526	02B7  FE C6				     inc dh
    527	02B9  EB EE				     jmp DSvertWhile
    528	02BB			     DSvertWhileEnd:
    529	02BB  FE CE				     dec dh
    530
    531	02BD  80 FA 16		     DShorWhile:     cmp dl, FrameBegCol + 2 ; 2 symbols margin
    532	02C0  72 07				     jb	DShorWhileEnd
    533
    534	02C2  E8 FF1E				     call ModSymbolAttr
    535	02C5  FE CA				     dec dl
    536	02C7  EB F4				     jmp DShorWhile
    537	02C9			     DShorWhileEnd:
    538
    539	02C9  5D				     pop bp
    540	02CA  C3				     ret
    541	02CB					     endp
    542				     ;--------------------------------------
    543
    544				     ;--------------------------------------
    545				     ; Paints console in blue
    546				     ;
    547				     ; Entry:
    548				     ; Assumes:	     es	= 0b800h
    549				     ; Destr:	     ch, bx
    550				     ;--------------------------------------
    551	02CB			     MakeConsoleBrightAgain  proc
    552
    553	02CB  B5 1F				     mov ch, 00011111b
    554	02CD  BB 0001				     mov bx, 1
    555
    556	02D0  81 FB 1040	     MCBAwhile:	     cmp bx, ScreenHeight * ScreenWidth	* 2
    557	02D4  77 08				     ja	MCBAwhileEnd
    558
    559	02D6  26: 88 2F				     mov byte ptr es:[bx], ch
    560	02D9  83 C3 02				     add bx, 2
    561
    562	02DC  EB F2				     jmp MCBAwhile
    563	02DE			     MCBAwhileEnd:
    564
    565	02DE  C3				     ret
    566	02DF					     endp
    567				     ;--------------------------------------
    568
    569				     ;--------------------------------------
    570				     ; Checks if argc is exceeded
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 11
prog.asm



    571				     ;
    572				     ; Entry:	     bx	= current symbol in argv
    573				     ; Effect:	     bx	= -1 if	argc is	exceeded
    574				     ; Destr:	     ax
    575				     ;--------------------------------------
    576	02DF			     CheckArgc	     proc
    577
    578						     ; bx < *argc + argv
    579	02DF  32 E4				     xor ah, ah
    580	02E1  A0 0080				     mov al, ds:[ArgcAddr]
    581	02E4  05 0081				     add ax, ArgvAddr
    582	02E7  3B D8				     cmp bx, ax
    583	02E9  72 03				     jb	@@CheckOK
    584
    585	02EB  BB FFFF				     mov bx, -1
    586	02EE			     @@CheckOK:
    587	02EE  C3				     ret
    588	02EF					     endp
    589
    590
    591				     ;--------------------------------------
    592
    593				     ;--------------------------------------
    594				     ; Skips spaces in argv. Also stops	and puts bx to -1 if argc is exceeded
    595				     ;
    596				     ; Entry:	     bx	= current symbol in argv
    597				     ; Assumes:
    598				     ; Effect:	     bx	- moves	it to next non space symbol
    599				     ; Destr:	     ax
    600				     ;--------------------------------------
    601	02EF			     SkipSpaces	     proc
    602
    603	02EF  80 3F 20		     @@while:	     cmp byte ptr [bx],	Space
    604	02F2  75 09				     jne @@endwhile
    605
    606	02F4  43				     inc bx
    607
    608	02F5  E8 FFE7				     call CheckArgc
    609	02F8  83 FB FF				     cmp bx, -1
    610	02FB  75 F2				     jne @@while
    611	02FD			     @@endwhile:
    612	02FD  C3				     ret
    613	02FE					     endp
    614				     ;--------------------------------------
    615
    616				     ;--------------------------------------
    617				     ; Gets decimal number into	cl from	argv
    618				     ; Entry:	     bx	= current symbol in argv
    619				     ; Assumes:
    620				     ; Effect:	     bx	- moves	it to the symbol after number
    621				     ;		     cl	- returns number
    622				     ;
    623				     ; Destr:	     ax, cl
    624				     ;--------------------------------------
    625	02FE			     GetDecimalNumber proc
    626
    627	02FE  E8 FFEE				     call SkipSpaces
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 12
prog.asm



    628	0301  E8 FFDB				     call CheckArgc
    629	0304  83 FB FF				     cmp bx, -1
    630	0307  74 25				     je	@@GetDecEnd
    631
    632	0309  8A 0F				     mov cl, [bx]
    633	030B  80 E9 30				     sub cl, '0'
    634	030E  43				     inc bx
    635
    636	030F  80 3F 20				     cmp byte ptr [bx],	Space
    637	0312  74 1A				     je	@@GetDecEnd
    638	0314  80 3F 0D				     cmp byte ptr [bx],	NewLine
    639	0317  74 15				     je	@@GetDecEnd
    640
    641	0319  E8 FFC3				     call CheckArgc
    642	031C  83 FB FF				     cmp bx, -1
    643	031F  74 0D				     je	@@GetDecEnd
    644
    645	0321  B0 0A				     mov al, 10
    646	0323  F6 E1				     mul cl
    647	0325  8A C8				     mov cl, al
    648
    649	0327  8A 0F				     mov cl, [bx]
    650	0329  2C 30				     sub al, '0'
    651	032B  02 C8				     add cl, al
    652
    653	032D  43				     inc bx
    654	032E			     @@GetDecEnd:
    655	032E  C3				     ret
    656	032F					     endp
    657				     ;--------------------------------------
    658
    659				     ;--------------------------------------
    660				     ; Gets hex	number into cl from argv
    661				     ; Entry:	     bx	= current symbol in argv
    662				     ; Assumes:
    663				     ; Effect:	     bx	- moves	it to the symbol after number
    664				     ;		     cl	- returns number
    665				     ;
    666				     ; Destr:	     ax, cl
    667				     ;--------------------------------------
    668	032F			     GetHexNumber proc
    669
    670	032F  E8 FFBD				     call SkipSpaces
    671	0332  E8 FFAA				     call CheckArgc
    672	0335  83 FB FF				     cmp bx, -1
    673	0338  74 25				     je	@@GetHexEnd
    674
    675	033A  8A 07				     mov al, [bx]
    676	033C  E8 0021				     call ConvertHexDigit
    677	033F  8A C8				     mov cl, al
    678	0341  43				     inc bx
    679
    680	0342  80 3F 20				     cmp byte ptr [bx],	Space
    681	0345  74 18				     je	@@GetHexEnd
    682	0347  80 3F 0D				     cmp byte ptr [bx],	NewLine
    683	034A  74 13				     je	@@GetHexEnd
    684
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 13
prog.asm



    685	034C  E8 FF90				     call CheckArgc
    686	034F  83 FB FF				     cmp bx, -1
    687	0352  74 0B				     je	@@GetHexEnd
    688
    689	0354  C0 E1 04				     shl cl, 4
    690
    691	0357  8A 07				     mov al, [bx]
    692	0359  E8 0004				     call ConvertHexDigit
    693	035C  02 C8				     add cl, al
    694
    695	035E  43				     inc bx
    696	035F			     @@GetHexEnd:
    697	035F  C3				     ret
    698	0360					     endp
    699				     ;--------------------------------------
    700
    701				     ;--------------------------------------
    702				     ; Converts	hex digit in al
    703				     ; Entry:	     al	- symbol
    704				     ; Assumes:
    705				     ; Effect:	     al	- number
    706				     ;
    707				     ; Destr:
    708				     ;--------------------------------------
    709	0360			     ConvertHexDigit proc
    710
    711						     ; if ('0' <= al &&	al <= '9')
    712	0360  3C 30				     cmp al, '0'
    713	0362  72 09				     jb	@@CHDelseif
    714	0364  3C 39				     cmp al, '9'
    715	0366  77 05				     ja	@@CHDelseif
    716
    717	0368  2C 30				     sub al, '0'
    718	036A  EB 10 90				     jmp @@CHDendif
    719	036D			     @@CHDelseif:
    720						     ; else if ('a' <= al && al	<= 'f')
    721	036D  3C 61				     cmp al, 'a'
    722	036F  72 09				     jb	@@CHDelse
    723	0371  3C 66				     cmp al, 'f'
    724	0373  77 05				     ja	@@CHDelse
    725
    726	0375  2C 57				     sub al, 'a' - 10
    727	0377  EB 03 90				     jmp @@CHDendif
    728	037A			     @@CHDelse:
    729	037A  2C 37				     sub al, 'A' - 10
    730	037C			     @@CHDendif:
    731	037C  C3				     ret
    732	037D					     endp
    733				     ;--------------------------------------
    734
    735				     ;--------------------------------------
    736				     ; Gets width and height from argv
    737				     ; GetWidthHeight(word* width_height)
    738				     ; Entry:	     bx	= current symbol in argv
    739				     ; Assumes:
    740				     ; Effect:	     bx	- moves	it to next token
    741				     ; Destr:	     ax, cl
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 14
prog.asm



    742				     ;--------------------------------------
    743	037D			     GetWidthHeight  proc
    744
    745	037D  55				     push bp
    746	037E  8B EC				     mov bp, sp
    747
    748	0380  E8 FF7B				     call GetDecimalNumber
    749	0383  83 FB FF				     cmp bx, -1
    750	0386  74 17				     je	@@FuncEnd
    751
    752	0388  53				     push bx
    753	0389  8B 5E 04				     mov bx, [bp + 4]
    754	038C  88 0F				     mov byte ptr [bx],	cl
    755	038E  5B				     pop bx
    756
    757	038F  E8 FF6C				     call GetDecimalNumber
    758	0392  83 FB FF				     cmp bx, -1
    759	0395  74 08				     je	@@FuncEnd
    760
    761	0397  53				     push bx
    762	0398  8B 5E 04				     mov bx, [bp + 4]
    763	039B  88 4F 01				     mov byte ptr [bx +	1], cl
    764	039E  5B				     pop bx
    765
    766	039F  5D		     @@FuncEnd:	     pop bp
    767	03A0  C3				     ret
    768	03A1					     endp
    769				     ;--------------------------------------
    770
    771				     ;--------------------------------------
    772				     ; Gets frame style	from argv
    773				     ; GetStyle(char* style)
    774				     ; Entry:	     bx	= current symbol in argv
    775				     ; Assumes:
    776				     ; Effect:	     bx	- moves	it to next token
    777				     ; Destr:	     ax, cx, dx
    778				     ;--------------------------------------
    779	03A1			     GetStyle	     proc
    780
    781	03A1  55				     push bp
    782	03A2  8B EC				     mov bp, sp
    783
    784	03A4  E8 FF48				     call SkipSpaces
    785	03A7  E8 FF35				     call CheckArgc
    786	03AA  83 FB FF				     cmp bx, -1
    787	03AD  74 2C				     je	@@GetStyleEnd
    788
    789	03AF  80 3F 2A				     cmp byte ptr [bx],	'*'
    790	03B2  75 11				     jne @@DefinedStyle
    791
    792	03B4  43				     inc bx
    793	03B5  E8 FF27				     call CheckArgc
    794	03B8  83 FB FF				     cmp bx, -1
    795	03BB  74 1E				     je	@@GetStyleEnd
    796
    797	03BD  8B CB				     mov cx, bx
    798	03BF  83 C3 09				     add bx, 9
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 15
prog.asm



    799
    800	03C2  EB 10 90				     jmp @@WriteStyle
    801
    802	03C5			     @@DefinedStyle:
    803	03C5  B0 09				     mov al, 9
    804	03C7  8A 27				     mov ah, [bx]
    805	03C9  80 EC 30				     sub ah, '0'
    806	03CC  F6 E4				     mul ah
    807
    808	03CE  43				     inc bx
    809
    810	03CF  B9 0540r				     mov cx, offset Styles
    811	03D2  03 C8				     add cx, ax
    812
    813	03D4			     @@WriteStyle:
    814	03D4  53				     push bx
    815	03D5  8B 5E 04				     mov bx, [bp + 4]
    816	03D8  89 0F				     mov word ptr [bx],	cx
    817	03DA  5B				     pop bx
    818
    819	03DB  5D		     @@GetStyleEnd:  pop bp
    820	03DC  C3				     ret
    821	03DD					     endp
    822				     ;--------------------------------------
    823
    824				     ;--------------------------------------
    825				     ; Gets text from argv
    826				     ; GetText(byte* header, byte* text, word* header_len_text_len)
    827				     ; Entry:	     bx	= current symbol in argv
    828				     ; Assumes:
    829				     ; Effect:
    830				     ; Destr:	     ax, bx, dx
    831				     ;--------------------------------------
    832	03DD			     GetText proc
    833
    834	03DD  55				     push bp
    835	03DE  8B EC				     mov bp, sp
    836
    837	03E0  E8 FF0C				     call SkipSpaces
    838	03E3  83 FB FF				     cmp bx, -1
    839	03E6  74 5C				     je	@@GetTextEnd
    840
    841	03E8  53				     push bx
    842	03E9  8B C3				     mov ax, bx
    843	03EB  8B 5E 04				     mov bx, [bp + 4]
    844	03EE  89 07				     mov word ptr [bx],	ax
    845	03F0  5B				     pop bx
    846
    847	03F1  53				     push bx
    848	03F2  81 EB 0081			     sub bx, ArgvAddr
    849	03F6  8A 16 0080			     mov dl, ds:[ArgcAddr]
    850	03FA  2A D3				     sub dl, bl	; dl = len(header + ':'	+ text)
    851	03FC  5B				     pop bx
    852
    853	03FD  06				     push es
    854	03FE  32 F6				     xor dh, dh
    855	0400  52				     push dx
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 16
prog.asm



    856	0401  6A 3A				     push ':'
    857	0403  53				     push bx
    858	0404  E8 FD16				     call mymemchr
    859	0407  83 C4 06				     add sp, 6
    860	040A  07				     pop es
    861
    862
    863	040B  3D 0000				     cmp ax, 0
    864	040E  74 24				     je	@@NoText
    865
    866						     ; cnt len
    867	0410  8B C8				     mov cx, ax
    868	0412  2B CB				     sub cx, bx	; cx = len(header)
    869
    870	0414  8B D8				     mov bx, ax
    871	0416  43				     inc bx
    872
    873	0417  53				     push bx
    874	0418  8B 5E 08				     mov bx, [bp + 8]
    875	041B  88 0F				     mov byte ptr [bx],	cl
    876
    877	041D  2A D1				     sub dl, cl
    878	041F  FE CA				     dec dl ; dl = len(text)
    879
    880	0421  8B 5E 08				     mov bx, [bp + 8]
    881	0424  88 57 01				     mov byte ptr [bx +	1], dl
    882	0427  5B				     pop bx
    883
    884	0428  53				     push bx
    885	0429  8B C3				     mov ax, bx
    886	042B  8B 5E 06				     mov bx, [bp + 6]
    887	042E  89 07				     mov word ptr [bx],	ax
    888	0430  5B				     pop bx
    889
    890	0431  EB 11 90				     jmp @@GetTextEnd
    891	0434			     @@NoText:
    892
    893	0434  53				     push bx
    894	0435  8B 5E 08				     mov bx, [bp + 8]
    895	0438  32 F6				     xor dh, dh
    896	043A  89 17				     mov word ptr [bx],	dx
    897
    898	043C  8B 5E 06				     mov bx, [bp + 6]
    899	043F  C7 07 0000			     mov word ptr [bx],	0
    900
    901	0443  5B				     pop bx
    902
    903
    904	0444  5D		     @@GetTextEnd:   pop bp
    905	0445  C3				     ret
    906	0446					     endp
    907				     ;--------------------------------------
    908
    909				     ;--------------------------------------
    910				     ; Entry:	     dl	= col num
    911				     ;		     dh	= line num
    912				     ;		     ch	= line end ptr
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 17
prog.asm



    913				     ;		     bx	= str
    914				     ;
    915				     ; Destr:	     cl, dl, bx
    916				     ;--------------------------------------
    917	0446			     PrintLine	     proc
    918
    919	0446  3A D5		     @@printchar:    cmp dl, ch
    920	0448  73 0C				     jae @@endprint
    921
    922	044A  53				     push bx
    923	044B  8A 0F				     mov cl, [bx]
    924	044D  E8 FD7F				     call ModSymbol
    925	0450  5B				     pop bx
    926
    927	0451  FE C2				     inc dl
    928	0453  43				     inc bx
    929
    930	0454  EB F0				     jmp @@printchar
    931
    932	0456			     @@endprint:
    933	0456  C3				     ret
    934	0457					     endp
    935
    936				     ;--------------------------------------
    937
    938				     ;--------------------------------------
    939				     ; Prints text
    940				     ; GetText(byte* header, byte* text, word width_height, word header_len_text_len)
    941				     ; Entry:
    942				     ; Assumes:	     es	= 0b800h
    943				     ; Effect:
    944				     ; Destr:	     ax, bx, cx, dx
    945				     ;--------------------------------------
    946	0457			     PrintText	     proc
    947
    948	0457  55				     push bp
    949	0458  8B EC				     mov bp, sp
    950
    951						     ; dh - line num
    952						     ; dl - col	num
    953
    954	045A  B6 06				     mov dh, FrameBegLine + 1
    955
    956	045C  8A 6E 0A				     mov ch, [bp + 10] ; ch = header_len
    957	045F  8A 56 08				     mov dl, [bp + 8]
    958	0462  2A D5				     sub dl, ch
    959	0464  D0 EA				     shr dl, 1
    960	0466  80 C2 14				     add dl, FrameBegCol
    961
    962	0469  8B 5E 04				     mov bx, [bp + 4]  ; bx = header
    963
    964	046C  02 EA				     add ch, dl	       ; ch = header_len + col_num
    965
    966	046E  E8 FFD5				     call PrintLine    ; header
    967
    968
    969	0471  8A 6E 0B				     mov ch, [bp + 11] ; ch = text_len
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 18
prog.asm



    970
    971	0474  80 FD 00				     cmp ch, 0
    972	0477  74 1A				     je	@@PrintNoText
    973
    974	0479  8A 56 08				     mov dl, [bp + 8]
    975	047C  2A D5				     sub dl, ch
    976	047E  D0 EA				     shr dl, 1
    977	0480  80 C2 14				     add dl, FrameBegCol
    978
    979	0483  8A 76 09				     mov dh, [bp + 9]
    980	0486  D0 EE				     shr dh, 1
    981	0488  80 C6 05				     add dh, FrameBegLine
    982
    983	048B  8B 5E 06				     mov bx, [bp + 6]  ; bx = text
    984
    985	048E  02 EA				     add ch, dl	       ; ch = text_len + col_num
    986
    987	0490  E8 FFB3				     call PrintLine    ; text
    988
    989	0493  5D		     @@PrintNoText:  pop bp
    990	0494  C3				     ret
    991	0495					     endp
    992				     ;--------------------------------------
    993
    994				     ;--------------------------------------
    995				     ; Gets hex	color from argv
    996				     ; GetColor(byte* color)
    997				     ; Entry:	     bx	= current symbol in argv
    998				     ; Assumes:
    999				     ; Effect:	     bx	- moves	it to next token
   1000				     ; Destr:	     ax
   1001				     ;--------------------------------------
   1002	0495			     GetColor	     proc
   1003
   1004	0495  55				     push bp
   1005	0496  8B EC				     mov bp, sp
   1006
   1007	0498  E8 FE54				     call SkipSpaces
   1008	049B  E8 FE41				     call CheckArgc
   1009	049E  83 FB FF				     cmp bx, -1
   1010	04A1  74 0A				     je	@@GetColorEnd
   1011
   1012	04A3  E8 FE89				     call GetHexNumber
   1013
   1014	04A6  53				     push bx
   1015	04A7  8B 5E 04				     mov bx, [bp + 4]
   1016	04AA  88 0F				     mov byte ptr [bx],	cl
   1017	04AC  5B				     pop bx
   1018
   1019	04AD  5D		     @@GetColorEnd:  pop bp
   1020	04AE  C3				     ret
   1021	04AF					     endp
   1022				     ;--------------------------------------
   1023
   1024				     ;======================================
   1025	04AF			     main:
   1026	04AF  FC				     cld
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 19
prog.asm



   1027	04B0  8B EC				     mov bp, sp
   1028
   1029	04B2  BB B800				     mov bx, 0b800h
   1030	04B5  8E C3				     mov es, bx	; videomem seg
   1031
   1032	04B7  E8 FE11				     call MakeConsoleBrightAgain
   1033
   1034						     ; locals:
   1035						     ; [bp - 2]	 = width_height
   1036						     ; [bp - 4]	 = color
   1037						     ; [bp - 6]	 = style
   1038						     ; [bp - 8]	 = header
   1039						     ; [bp - 10] = text
   1040						     ; [bp - 12] = header_len_text_len
   1041	04BA  83 EC 0C				     sub sp, 12
   1042
   1043	04BD  BB 0081				     mov bx, ArgvAddr
   1044
   1045	04C0  8D 46 FE				     lea ax, [bp - 2]
   1046	04C3  50				     push ax
   1047	04C4  E8 FEB6				     call GetWidthHeight
   1048	04C7  83 C4 02				     add sp, 2
   1049	04CA  83 FB FF				     cmp bx, -1
   1050	04CD  74 62				     je	@@ErrNotEnoughArgs
   1051
   1052	04CF  8D 46 FC				     lea ax, [bp - 4]
   1053	04D2  50				     push ax
   1054	04D3  E8 FFBF				     call GetColor
   1055	04D6  83 C4 02				     add sp, 2
   1056	04D9  83 FB FF				     cmp bx, -1
   1057	04DC  74 53				     je	@@ErrNotEnoughArgs
   1058
   1059	04DE  8D 46 FA				     lea ax, [bp - 6]
   1060	04E1  50				     push ax
   1061	04E2  E8 FEBC				     call GetStyle
   1062	04E5  83 C4 02				     add sp, 2
   1063	04E8  83 FB FF				     cmp bx, -1
   1064	04EB  74 44				     je	@@ErrNotEnoughArgs
   1065
   1066	04ED  8D 46 F4				     lea ax, [bp - 12]
   1067	04F0  50				     push ax
   1068	04F1  8D 46 F6				     lea ax, [bp - 10]
   1069	04F4  50				     push ax
   1070	04F5  8D 46 F8				     lea ax, [bp - 8]
   1071	04F8  50				     push ax
   1072	04F9  E8 FEE1				     call GetText
   1073	04FC  83 C4 06				     add sp, 6
   1074	04FF  83 FB FF				     cmp bx, -1
   1075	0502  74 2D				     je	@@ErrNotEnoughArgs
   1076
   1077	0504  FF 76 FC				     push [bp -	4]
   1078	0507  FF 76 FE				     push [bp -	2]
   1079	050A  FF 76 FA				     push [bp -	6]
   1080	050D  E8 FCE8				     call DrawFrame
   1081	0510  83 C4 06				     add sp, 6
   1082
   1083	0513  FF 76 FE				     push [bp -	2]
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 20
prog.asm



   1084	0516  E8 FD7F				     call DrawShadow
   1085	0519  83 C4 02				     add sp, 2
   1086
   1087	051C  FF 76 F4				     push [bp -	12]
   1088	051F  FF 76 FE				     push [bp -	2]
   1089	0522  FF 76 F6				     push [bp -	10]
   1090	0525  FF 76 F8				     push [bp -	8]
   1091	0528  E8 FF2C				     call PrintText
   1092	052B  83 C4 08				     add sp, 8
   1093
   1094	052E  EB 08 90				     jmp @@ProgramEnd
   1095
   1096	0531			     @@ErrNotEnoughArgs:
   1097						     ; TODO err	print
   1098	0531  B4 09				     mov ah, 09h
   1099	0533  BA 0564r				     mov dx, offset ErrNotEnoughArgsStr
   1100	0536  CD 21				     int 21h
   1101
   1102	0538  83 C4 0C		     @@ProgramEnd:   add sp, 12
   1103						     EOP
1  1104	053B  B8 4C00				     mov ax, 4c00h
1  1105	053E  CD 21				     int 21h
   1106
   1107	0540  2F 2D 5C 7C 20 7C	5C+  Styles  db	"/-\| |\-/"
   1108	      2D 2F
   1109	0549  DA C4 BF B3 20 B3	C0+	     db	0dah, 0c4h, 0bfh, 0b3h,	Space, 0b3h, 0c0h, 0c4h, 0d9h ;	single frame
   1110	      C4 D9
   1111	0552  C9 CD BB BA 20 BA	C8+	     db	0c9h, 0cdh, 0bbh, 0bah,	Space, 0bah, 0c8h, 0cdh, 0bch ;	double frame
   1112	      CD BC
   1113	055B  03 03 03 03 20 03	03+	     db	003h, 003h, 003h, 003h,	Space, 003h, 003h, 003h, 003h ;	hearts
   1114	      03 03
   1115
   1116	0564  4E 6F 74 20 65 6E	6F+  ErrNotEnoughArgsStr db "Not enough	arguments$"
   1117	      75 67 68 20 61 72	67+
   1118	      75 6D 65 6E 74 73	24
   1119
   1120	      =004E		     FrameColorAttr  equ 4eh ; 01001110b
   1121
   1122
   1123				     end	     Start
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 21
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/15/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "22:12:44"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CHDELSE			  Near	 DGROUP:037A
@@CHDELSEIF			  Near	 DGROUP:036D
@@CHDENDIF			  Near	 DGROUP:037C
@@CHECKOK			  Near	 DGROUP:02EE
@@DEFINEDSTYLE			  Near	 DGROUP:03C5
@@ELSE				  Near	 DGROUP:0197
@@ENDIF				  Near	 DGROUP:0199
@@ENDPRINT			  Near	 DGROUP:0456
@@ENDWHILE			  Near	 DGROUP:02FD
@@ERRNOTENOUGHARGS		  Near	 DGROUP:0531
@@FUNCEND			  Near	 DGROUP:039F
@@GETCOLOREND			  Near	 DGROUP:04AD
@@GETDECEND			  Near	 DGROUP:032E
@@GETHEXEND			  Near	 DGROUP:035F
@@GETSTYLEEND			  Near	 DGROUP:03DB
@@GETTEXTEND			  Near	 DGROUP:0444
@@ISFOUND			  Near	 DGROUP:013B
@@ISNOTFOUND			  Near	 DGROUP:013E
@@NOTEXT			  Near	 DGROUP:0434
@@PRINTCHAR			  Near	 DGROUP:0446
@@PRINTNOTEXT			  Near	 DGROUP:0493
@@PROGRAMEND			  Near	 DGROUP:0538
@@WHILE				  Near	 DGROUP:02EF
@@WRITESTYLE			  Near	 DGROUP:03D4
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGCADDR			  Number 0080
ARGVADDR			  Number 0081
CHECKARGC			  Near	 DGROUP:02DF
CONVERTHEXDIGIT			  Near	 DGROUP:0360
DFLEWHILE			  Near	 DGROUP:024A
DFLEWHILEEND			  Near	 DGROUP:025A
DFLWHILE			  Near	 DGROUP:0276
DFLWHILEEND			  Near	 DGROUP:0286
DFWHILE				  Near	 DGROUP:0218
DFWHILEEND			  Near	 DGROUP:0229
DRAWFRAME			  Near	 DGROUP:01F8
DRAWFRAMEEMPTYLINE		  Near	 DGROUP:0243
DRAWFRAMELINE			  Near	 DGROUP:025C
DRAWSHADOW			  Near	 DGROUP:0298
Turbo Assembler	 Version 4.1	    02/15/24 22:12:45	    Page 22
Symbol Table



DRAWSYMBOL			  Near	 DGROUP:01BB
DSHORWHILE			  Near	 DGROUP:02BD
DSHORWHILEEND			  Near	 DGROUP:02C9
DSVERTWHILE			  Near	 DGROUP:02A9
DSVERTWHILEEND			  Near	 DGROUP:02BB
ERRNOTENOUGHARGSSTR		  Byte	 DGROUP:0564
FRAMEBEGCOL			  Number 0014
FRAMEBEGLINE			  Number 0005
FRAMECOLORATTR			  Number 004E
GETCOLOR			  Near	 DGROUP:0495
GETDECIMALNUMBER		  Near	 DGROUP:02FE
GETHEXNUMBER			  Near	 DGROUP:032F
GETSTYLE			  Near	 DGROUP:03A1
GETTEXT				  Near	 DGROUP:03DD
GETWIDTHHEIGHT			  Near	 DGROUP:037D
MAIN				  Near	 DGROUP:04AF
MAKECONSOLEBRIGHTAGAIN		  Near	 DGROUP:02CB
MCBAWHILE			  Near	 DGROUP:02D0
MCBAWHILEEND			  Near	 DGROUP:02DE
MODSYMBOL			  Near	 DGROUP:01CF
MODSYMBOLATTR			  Near	 DGROUP:01E3
MYMEMCHR			  Near	 DGROUP:011D
MYMEMCMP			  Near	 DGROUP:019E
MYMEMCPY			  Near	 DGROUP:0157
MYMEMMOVE			  Near	 DGROUP:016E
MYMEMSET			  Near	 DGROUP:0140
MYSTRLEN			  Near	 DGROUP:0103
NEWLINE				  Number 000D
PRINTLINE			  Near	 DGROUP:0446
PRINTTEXT			  Near	 DGROUP:0457
SCREENHEIGHT			  Number 001A
SCREENWIDTH			  Number 0050
SHADOWATTRMASK			  Number 0087
SKIPSPACES			  Near	 DGROUP:02EF
SPACE				  Number 0020
START				  Near	 DGROUP:0100
STYLES				  Byte	 DGROUP:0540

Macro Name

EOP

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0579 Word	  Public  CODE
