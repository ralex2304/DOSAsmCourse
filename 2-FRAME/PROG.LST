Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 1
prog.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4				     org 100h
      5
      6				     include ..\macros.asm
1     7
1     8				     EOP     macro
1     9						     mov ax, 4c00h
1    10						     int 21h
1    11					     endm		     ; end of program
1    12
     13
     14	0100  E9 0283		     Start:	     jmp main
     15
     16	      =0050		     ScreenWidth     equ 80
     17	      =001A		     ScreenHeight    equ 26
     18
     19	      =0087		     ShadowAttrMask  equ 10000111b
     20
     21	      =0020		     Space	     equ ' '
     22	      =000D		     NewLine	     equ 0dh
     23
     24	      =0005		     FrameBegLine    equ 5
     25	      =0014		     FrameBegCol     equ 20
     26
     27	      =0080		     ArgcAddr	     equ 0080h
     28	      =0081		     ArgvAddr	     equ 0081h
     29
     30				     ;--------------------------------------
     31				     ; Draws symbol
     32				     ; Entry:	     dh	- line num
     33				     ;		     dl	- col num
     34				     ;		     cl	- symbol
     35				     ;		     ch	- attr
     36				     ; Assumes:	     es	= 0b800h
     37				     ; Destr:	     ax, bx
     38				     ;--------------------------------------
     39	0103			     DrawSymbol	     proc
     40
     41	0103  8A C6				     mov al, dh
     42	0105  B3 50				     mov bl, ScreenWidth
     43	0107  F6 E3				     mul bl	; ax = dh * ScreenWidth
     44
     45	0109  33 DB				     xor bx, bx
     46	010B  8A DA				     mov bl, dl
     47	010D  03 C3				     add ax, bx	; ax +=	dl (col	num)
     48
     49	010F  D1 E0				     shl ax, 1 ; ax *= 2
     50
     51	0111  8B D8				     mov bx, ax
     52	0113  26: 89 0F				     mov word ptr es:[bx], cx
     53
     54	0116  C3				     ret
     55	0117					     endp
     56				     ;--------------------------------------
     57
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 2
prog.asm



     58				     ;--------------------------------------
     59				     ; Draws symbol wirhout changing attributes
     60				     ; Entry:	     dh	- line num
     61				     ;		     dl	- col num
     62				     ;		     cl	- symbol
     63				     ; Assumes:	     es	= 0b800h
     64				     ; Destr:	     ax, bx
     65				     ;--------------------------------------
     66	0117			     ModSymbol	     proc
     67
     68	0117  8A C6				     mov al, dh
     69	0119  B3 50				     mov bl, ScreenWidth
     70	011B  F6 E3				     mul bl	; ax = dh * ScreenWidth
     71
     72	011D  33 DB				     xor bx, bx
     73	011F  8A DA				     mov bl, dl
     74	0121  03 C3				     add ax, bx	; ax +=	dl (col	num)
     75
     76	0123  D1 E0				     shl ax, 1 ; ax *= 2
     77
     78	0125  8B D8				     mov bx, ax
     79	0127  26: 88 0F				     mov byte ptr es:[bx], cl
     80
     81	012A  C3				     ret
     82	012B					     endp
     83				     ;--------------------------------------
     84
     85				     ;--------------------------------------
     86				     ; Modifies	symbol attr (applies & operation with attr mask)
     87				     ; Entry:	     dh	- line num
     88				     ;		     dl	- col num
     89				     ;		     ch	- attr mask
     90				     ; Assumes:	     es	= 0b800h
     91				     ; Destr:	     ax, bx
     92				     ;--------------------------------------
     93	012B			     ModSymbolAttr   proc
     94
     95	012B  52				     push dx
     96
     97	012C  8A C6				     mov al, dh
     98	012E  B3 50				     mov bl, ScreenWidth
     99	0130  F6 E3				     mul bl	; ax = dh * ScreenWidth
    100
    101	0132  32 F6				     xor dh, dh
    102	0134  03 C2				     add ax, dx	; ax +=	dl (col	num)
    103
    104	0136  D1 E0				     shl ax, 1 ; ax *= 2
    105
    106	0138  8B D8				     mov bx, ax
    107	013A  43				     inc bx ; attr address
    108
    109	013B  26: 20 2F				     and byte ptr es:[bx], ch
    110
    111	013E  5A				     pop dx
    112	013F  C3				     ret
    113	0140					     endp
    114				     ;--------------------------------------
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 3
prog.asm



    115
    116				     ;--------------------------------------
    117				     ; Draws frame (const byte*	style_str, word	width_height, byte color)
    118				     ; Entry:
    119				     ; Assumes:	     es	= 0b800h
    120				     ; Destr:	     ax, bx, cx, dx
    121				     ;--------------------------------------
    122	0140			     DrawFrame	     proc
    123
    124	0140  55				     push bp
    125	0141  8B EC				     mov bp, sp
    126
    127						     ; init attr
    128	0143  8A 6E 08				     mov ch, [bp + 8]
    129
    130	0146  B6 05				     mov dh, FrameBegLine
    131
    132						     ; top empty line
    133	0148  FF 76 06				     push [bp +	6]
    134	014B  E8 003D				     call DrawFrameEmptyLine
    135						     ; [bp + 6]	is used	in next	call
    136	014E  FE C6				     inc dh
    137
    138						     ; top line
    139	0150  FF 76 04				     push [bp +	4]
    140	0153  E8 004E				     call DrawFrameLine
    141	0156  83 C4 02				     add sp, 2 ; [bp + 6] is used in next call
    142
    143						     ; middle lines
    144	0159  8B 46 04				     mov ax, [bp + 4]
    145	015C  05 0003				     add ax, 3
    146	015F  50				     push ax
    147
    148	0160  FE C6		     DFWhile:	     inc dh
    149	0162  8A 5E 07				     mov bl, [bp + 7]
    150	0165  80 C3 02				     add bl, FrameBegLine - 3
    151	0168  3A F3				     cmp dh, bl
    152	016A  77 05				     ja	DFWhileEnd
    153
    154	016C  E8 0035				     call DrawFrameLine
    155	016F  EB EF				     jmp DFWhile
    156	0171			     DFWhileEnd:
    157	0171  83 C4 02				     add sp, 2 ; [bp + 6] is used in next call
    158
    159						     ; bottom line
    160	0174  8B 46 04				     mov ax, [bp + 4]
    161	0177  05 0006				     add ax, 6
    162	017A  50				     push ax
    163	017B  E8 0026				     call DrawFrameLine
    164	017E  83 C4 02				     add sp, 2 ; [bp + 6] is used in next call
    165	0181  FE C6				     inc dh
    166
    167						     ; bottom empty line
    168	0183  E8 0005				     call DrawFrameEmptyLine
    169	0186  83 C4 02				     add sp, 2
    170
    171	0189  5D				     pop bp
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 4
prog.asm



    172	018A  C3				     ret
    173	018B					     endp
    174				     ;---------------------------------------
    175
    176				     ;---------------------------------------
    177				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    178				     ; DrawDrameEmptyLine (word	width)
    179				     ;
    180				     ; RegEntry:     ch	= color	attr
    181				     ;		     dh	= line num
    182				     ; Assumes:	     es	= 0b800h
    183				     ;		     ds	allows to reach	style_str
    184				     ;
    185				     ; Destr:	     ax, bx, cl, dl
    186				     ;--------------------------------------
    187	018B			     DrawFrameEmptyLine	     proc
    188
    189	018B  55				     push bp
    190	018C  8B EC				     mov bp, sp
    191
    192	018E  B1 20				     mov cl, Space
    193	0190  B2 14				     mov dl, FrameBegCol
    194
    195						     ; while (dl++ < FrameWidth	+ FrameBegCol -	1):
    196						     ;	     DrawSymbol()
    197	0192  8A 46 04		     DFLEwhile:	     mov al, [bp + 4]
    198	0195  04 13				     add al, FrameBegCol - 1
    199	0197  3A D0				     cmp dl, al
    200	0199  77 07				     ja	DFLEwhileEnd
    201
    202	019B  E8 FF65				     call DrawSymbol
    203
    204	019E  FE C2				     inc dl
    205	01A0  EB F0				     jmp DFLEwhile
    206	01A2			     DFLEwhileEnd:
    207
    208	01A2  5D				     pop bp
    209	01A3  C3				     ret
    210	01A4					     endp
    211
    212				     ;--------------------------------------
    213
    214				     ;--------------------------------------
    215				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    216				     ; DrawDrameLine (const byte* style_str, word width_height)
    217				     ;
    218				     ; RegEntry:     ch	= color	attr
    219				     ; Assumes:	     es	= 0b800h
    220				     ;		     ds	allows to reach	style_str
    221				     ;
    222				     ; Destr:	     ax, bx, cl, dl
    223				     ;-------------------------------------
    224
    225	01A4			     DrawFrameLine   proc
    226
    227	01A4  55				     push bp
    228	01A5  8B EC				     mov bp, sp
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 5
prog.asm



    229
    230						     ; write empty symbol
    231	01A7  B2 14				     mov dl, FrameBegCol
    232	01A9  B1 20				     mov cl, Space
    233	01AB  E8 FF55				     call DrawSymbol
    234
    235						     ; write left symbol
    236	01AE  FE C2				     inc dl
    237	01B0  8B 5E 04				     mov bx, [bp + 4]
    238	01B3  8A 0F				     mov cl, [bx]
    239	01B5  E8 FF4B				     call DrawSymbol
    240
    241						     ; write middle symbols
    242	01B8  8B 5E 04				     mov bx, [bp + 4]
    243	01BB  8A 4F 01				     mov cl, [bx + 1]
    244
    245						     ; while (dl++ < FrameWidth	- 4 + (FrameBegCol + 1)):
    246						     ;	     DrawSymbol()
    247	01BE  FE C2		     DFLwhile:	     inc dl
    248	01C0  8A 46 06				     mov al, [bp + 6]
    249	01C3  04 11				     add al, (FrameBegCol + 1) - 4
    250	01C5  3A D0				     cmp dl, al
    251	01C7  77 05				     ja	DFLwhileEnd
    252
    253	01C9  E8 FF37				     call DrawSymbol
    254
    255	01CC  EB F0				     jmp DFLWhile
    256	01CE			     DFLwhileEnd:
    257						     ; write right symbol
    258	01CE  8B 5E 04				     mov bx, [bp + 4]
    259	01D1  8A 4F 02				     mov cl, [bx + 2]
    260	01D4  E8 FF2C				     call DrawSymbol
    261
    262						     ; write empty symbol
    263	01D7  FE C2				     inc dl
    264	01D9  B1 20				     mov cl, Space
    265	01DB  E8 FF25				     call DrawSymbol
    266
    267	01DE  5D				     pop bp
    268	01DF  C3				     ret
    269	01E0					     endp
    270
    271				     ;--------------------------------------
    272
    273				     ;--------------------------------------
    274				     ; Draws shadow
    275				     ; DrawShadow (word	width_height)
    276				     ; Entry:
    277				     ; Assumes:	     es	= 0b800h
    278				     ;
    279				     ; Destr: ax, bx, cx, dx
    280				     ;--------------------------------------
    281	01E0			     DrawShadow	     proc
    282
    283	01E0  55				     push bp
    284	01E1  8B EC				     mov bp, sp
    285
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 6
prog.asm



    286	01E3  B5 87				     mov ch, ShadowAttrMask
    287	01E5  B6 06				     mov dh, FrameBegLine + 1
    288	01E7  B2 14				     mov dl, FrameBegCol
    289	01E9  02 56 04				     add dl, [bp + 4]
    290
    291	01EC  B1 05				     mov cl, FrameBegLine
    292	01EE  02 4E 05				     add cl, [bp + 5] ;	FrameHeight
    293	01F1  3A F1		     DSvertWhile:    cmp dh, cl
    294	01F3  77 0E				     ja	DSvertWhileEnd
    295
    296	01F5  E8 FF33				     call ModSymbolAttr
    297	01F8  FE C2				     inc dl
    298	01FA  E8 FF2E				     call ModSymbolAttr
    299	01FD  FE CA				     dec dl
    300
    301	01FF  FE C6				     inc dh
    302	0201  EB EE				     jmp DSvertWhile
    303	0203			     DSvertWhileEnd:
    304	0203  FE CE				     dec dh
    305
    306	0205  80 FA 16		     DShorWhile:     cmp dl, FrameBegCol + 2 ; 2 symbols margin
    307	0208  72 07				     jb	DShorWhileEnd
    308
    309	020A  E8 FF1E				     call ModSymbolAttr
    310	020D  FE CA				     dec dl
    311	020F  EB F4				     jmp DShorWhile
    312	0211			     DShorWhileEnd:
    313
    314	0211  5D				     pop bp
    315	0212  C3				     ret
    316	0213					     endp
    317				     ;--------------------------------------
    318
    319				     ;--------------------------------------
    320				     ; Paints console in blue
    321				     ;
    322				     ; Entry:
    323				     ; Assumes:	     es	= 0b800h
    324				     ; Destr:	     ch, bx
    325				     ;--------------------------------------
    326	0213			     MakeConsoleBrightAgain  proc
    327
    328	0213  B5 1F				     mov ch, 00011111b
    329	0215  BB 0001				     mov bx, 1
    330
    331	0218  81 FB 1040	     MCBAwhile:	     cmp bx, ScreenHeight * ScreenWidth	* 2
    332	021C  77 08				     ja	MCBAwhileEnd
    333
    334	021E  26: 88 2F				     mov byte ptr es:[bx], ch
    335	0221  83 C3 02				     add bx, 2
    336
    337	0224  EB F2				     jmp MCBAwhile
    338	0226			     MCBAwhileEnd:
    339
    340	0226  C3				     ret
    341	0227					     endp
    342				     ;--------------------------------------
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 7
prog.asm



    343
    344				     ;--------------------------------------
    345				     ; Checks if argc is exceeded
    346				     ;
    347				     ; Entry:	     bx	= current symbol in argv
    348				     ; Effect:	     bx	= -1 if	argc is	exceeded
    349				     ; Destr:	     ax
    350				     ;--------------------------------------
    351	0227			     CheckArgc	     proc
    352
    353	0227  A1 0080				     mov ax, ds:[ArgcAddr]
    354	022A  05 0081				     add ax, ArgvAddr
    355	022D  3B D8				     cmp bx, ax
    356	022F  72 03				     jb	@@CheckOK
    357
    358	0231  BB FFFF				     mov bx, -1
    359	0234			     @@CheckOK:
    360	0234  C3				     ret
    361	0235					     endp
    362
    363
    364				     ;--------------------------------------
    365
    366				     ;--------------------------------------
    367				     ; Skips spaces in argv. Also stops	and puts bx to -1 if argc is exceeded
    368				     ;
    369				     ; Entry:	     bx	= current symbol in argv
    370				     ; Assumes:
    371				     ; Effect:	     bx	- moves	it to next non space symbol
    372				     ; Destr:	     ax
    373				     ;--------------------------------------
    374	0235			     SkipSpaces	     proc
    375
    376	0235  80 3F 20		     @@while:	     cmp byte ptr [bx],	Space
    377	0238  75 09				     jne @@endwhile
    378
    379	023A  43				     inc bx
    380
    381	023B  E8 FFE9				     call CheckArgc
    382	023E  83 FB FF				     cmp bx, -1
    383	0241  75 F2				     jne @@while
    384	0243			     @@endwhile:
    385	0243  C3				     ret
    386	0244					     endp
    387				     ;--------------------------------------
    388
    389				     ;--------------------------------------
    390				     ; Gets decimal number into	cl from	argv
    391				     ; Entry:	     bx	= current symbol in argv
    392				     ; Assumes:
    393				     ; Effect:	     bx	- moves	it to the symbol after number
    394				     ;		     cl	- returns number
    395				     ;
    396				     ; Destr:	     ax, cl
    397				     ;--------------------------------------
    398	0244			     GetDecimalNumber proc
    399
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 8
prog.asm



    400	0244  E8 FFEE				     call SkipSpaces
    401	0247  83 FB FF				     cmp bx, -1
    402	024A  74 25				     je	@@GetDecEnd
    403
    404	024C  8A 0F				     mov cl, [bx]
    405	024E  80 E9 30				     sub cl, '0'
    406	0251  43				     inc bx
    407
    408	0252  80 3F 20				     cmp byte ptr [bx],	Space
    409	0255  74 1A				     je	@@GetDecEnd
    410	0257  80 3F 0D				     cmp byte ptr [bx],	NewLine
    411	025A  74 15				     je	@@GetDecEnd
    412
    413	025C  E8 FFC8				     call CheckArgc
    414	025F  83 FB FF				     cmp bx, -1
    415	0262  74 0D				     je	@@GetDecEnd
    416
    417	0264  B0 0A				     mov al, 10
    418	0266  F6 E1				     mul cl
    419	0268  8A C8				     mov cl, al
    420
    421	026A  8A 0F				     mov cl, [bx]
    422	026C  2C 30				     sub al, '0'
    423	026E  02 C8				     add cl, al
    424
    425	0270  43				     inc bx
    426	0271			     @@GetDecEnd:
    427	0271  C3				     ret
    428	0272					     endp
    429				     ;--------------------------------------
    430
    431				     ;--------------------------------------
    432				     ; Gets hex	number into cl from argv
    433				     ; Entry:	     bx	= current symbol in argv
    434				     ; Assumes:
    435				     ; Effect:	     bx	- moves	it to the symbol after number
    436				     ;		     cl	- returns number
    437				     ;
    438				     ; Destr:	     ax, cl
    439				     ;--------------------------------------
    440	0272			     GetHexNumber proc
    441
    442	0272  E8 FFC0				     call SkipSpaces
    443	0275  83 FB FF				     cmp bx, -1
    444	0278  74 25				     je	@@GetHexEnd
    445
    446	027A  8A 07				     mov al, [bx]
    447	027C  E8 0021				     call ConvertHexDigit
    448	027F  8A C8				     mov cl, al
    449	0281  43				     inc bx
    450
    451	0282  80 3F 20				     cmp byte ptr [bx],	Space
    452	0285  74 18				     je	@@GetHexEnd
    453	0287  80 3F 0D				     cmp byte ptr [bx],	NewLine
    454	028A  74 13				     je	@@GetHexEnd
    455
    456	028C  E8 FF98				     call CheckArgc
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 9
prog.asm



    457	028F  83 FB FF				     cmp bx, -1
    458	0292  74 0B				     je	@@GetHexEnd
    459
    460	0294  C0 E1 04				     shl cl, 4
    461
    462	0297  8A 07				     mov al, [bx]
    463	0299  E8 0004				     call ConvertHexDigit
    464	029C  02 C8				     add cl, al
    465
    466	029E  43				     inc bx
    467	029F			     @@GetHexEnd:
    468	029F  C3				     ret
    469	02A0					     endp
    470				     ;--------------------------------------
    471
    472				     ;--------------------------------------
    473				     ; Converts	hex digit in al
    474				     ; Entry:	     al	- symbol
    475				     ; Assumes:
    476				     ; Effect:	     al	- number
    477				     ;
    478				     ; Destr:
    479				     ;--------------------------------------
    480	02A0			     ConvertHexDigit proc
    481
    482						     ; if ('0' <= al &&	al <= '9')
    483	02A0  3C 30				     cmp al, '0'
    484	02A2  72 09				     jb	@@CHDelseif
    485	02A4  3C 39				     cmp al, '9'
    486	02A6  77 05				     ja	@@CHDelseif
    487
    488	02A8  2C 30				     sub al, '0'
    489	02AA  EB 10 90				     jmp @@CHDendif
    490	02AD			     @@CHDelseif:
    491						     ; else if ('a' <= al && al	<= 'f')
    492	02AD  3C 61				     cmp al, 'a'
    493	02AF  72 09				     jb	@@CHDelse
    494	02B1  3C 66				     cmp al, 'f'
    495	02B3  77 05				     ja	@@CHDelse
    496
    497	02B5  2C 57				     sub al, 'a' - 10
    498	02B7  EB 03 90				     jmp @@CHDendif
    499	02BA			     @@CHDelse:
    500	02BA  2C 37				     sub al, 'A' - 10
    501	02BC			     @@CHDendif:
    502	02BC  C3				     ret
    503	02BD					     endp
    504				     ;--------------------------------------
    505
    506				     ;--------------------------------------
    507				     ; Gets width and height from argv
    508				     ; GetWidthHeight(word* width_height)
    509				     ; Entry:	     bx	= current symbol in argv
    510				     ; Assumes:
    511				     ; Effect:	     bx	- moves	it to next token
    512				     ; Destr:	     ax, cl
    513				     ;--------------------------------------
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 10
prog.asm



    514	02BD			     GetWidthHeight  proc
    515
    516	02BD  55				     push bp
    517	02BE  8B EC				     mov bp, sp
    518
    519	02C0  E8 FF81				     call GetDecimalNumber
    520	02C3  83 FB FF				     cmp bx, -1
    521	02C6  74 17				     je	@@FuncEnd
    522
    523	02C8  53				     push bx
    524	02C9  8B 5E 04				     mov bx, [bp + 4]
    525	02CC  88 0F				     mov byte ptr [bx],	cl
    526	02CE  5B				     pop bx
    527
    528	02CF  E8 FF72				     call GetDecimalNumber
    529	02D2  83 FB FF				     cmp bx, -1
    530	02D5  74 08				     je	@@FuncEnd
    531
    532	02D7  53				     push bx
    533	02D8  8B 5E 04				     mov bx, [bp + 4]
    534	02DB  88 4F 01				     mov byte ptr [bx +	1], cl
    535	02DE  5B				     pop bx
    536
    537	02DF  5D		     @@FuncEnd:	     pop bp
    538	02E0  C3				     ret
    539	02E1					     endp
    540				     ;--------------------------------------
    541
    542				     ;--------------------------------------
    543				     ; Gets frame style	from argv
    544				     ; GetStyle(char* style)
    545				     ; Entry:	     bx	= current symbol in argv
    546				     ; Assumes:
    547				     ; Effect:	     bx	- moves	it to next token
    548				     ; Destr:	     ax, cx, dx
    549				     ;--------------------------------------
    550	02E1			     GetStyle	     proc
    551
    552	02E1  55				     push bp
    553	02E2  8B EC				     mov bp, sp
    554
    555	02E4  E8 FF4E				     call SkipSpaces
    556	02E7  83 FB FF				     cmp bx, -1
    557	02EA  74 2C				     je	@@GetStyleEnd
    558
    559	02EC  80 3F 2A				     cmp byte ptr [bx],	'*'
    560	02EF  75 11				     jne @@DefinedStyle
    561
    562	02F1  43				     inc bx
    563	02F2  E8 FF32				     call CheckArgc
    564	02F5  83 FB FF				     cmp bx, -1
    565	02F8  74 1E				     je	@@GetStyleEnd
    566
    567	02FA  8B CB				     mov cx, bx
    568	02FC  83 C3 09				     add bx, 9
    569
    570	02FF  EB 10 90				     jmp @@WriteStyle
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 11
prog.asm



    571
    572	0302			     @@DefinedStyle:
    573	0302  B0 09				     mov al, 9
    574	0304  8A 27				     mov ah, [bx]
    575	0306  80 EC 30				     sub ah, '0'
    576	0309  F6 E4				     mul ah
    577
    578	030B  43				     inc bx
    579
    580	030C  B9 0409r				     mov cx, offset Styles
    581	030F  03 C8				     add cx, ax
    582
    583	0311			     @@WriteStyle:
    584	0311  53				     push bx
    585	0312  8B 5E 04				     mov bx, [bp + 4]
    586	0315  89 0F				     mov word ptr [bx],	cx
    587	0317  5B				     pop bx
    588
    589	0318  5D		     @@GetStyleEnd:  pop bp
    590	0319  C3				     ret
    591	031A					     endp
    592				     ;--------------------------------------
    593
    594				     ;--------------------------------------
    595				     ; Gets text from argv
    596				     ; GetText(byte* text, byte* text_len)
    597				     ; Entry:	     bx	= current symbol in argv
    598				     ; Assumes:
    599				     ; Effect:
    600				     ; Destr:	     ax, bx
    601				     ;--------------------------------------
    602	031A			     GetText proc
    603
    604	031A  55				     push bp
    605	031B  8B EC				     mov bp, sp
    606
    607	031D  E8 FF15				     call SkipSpaces
    608	0320  83 FB FF				     cmp bx, -1
    609	0323  74 19				     je	@@GetTextEnd
    610
    611	0325  53				     push bx
    612	0326  81 EB 0081			     sub bx, ArgvAddr
    613	032A  A0 0080				     mov al, ds:[ArgcAddr]
    614	032D  2A C3				     sub al, bl
    615
    616	032F  8B 5E 06				     mov bx, [bp + 6]
    617	0332  32 E4				     xor ah, ah
    618	0334  89 07				     mov word ptr [bx],	ax
    619
    620	0336  5B				     pop bx
    621	0337  8B C3				     mov ax, bx
    622	0339  8B 5E 04				     mov bx, [bp + 4]
    623	033C  89 07				     mov word ptr [bx],	ax
    624
    625	033E  5D		     @@GetTextEnd:   pop bp
    626	033F  C3				     ret
    627	0340					     endp
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 12
prog.asm



    628				     ;--------------------------------------
    629
    630				     ;--------------------------------------
    631				     ; Prints text
    632				     ; GetText(byte* text, word	width_height, byte text_len)
    633				     ; Entry:
    634				     ; Assumes:	     es	= 0b800h
    635				     ; Effect:
    636				     ; Destr:	     ax, bx, cx, dx
    637				     ;--------------------------------------
    638	0340			     PrintText	     proc
    639
    640	0340  55				     push bp
    641	0341  8B EC				     mov bp, sp
    642
    643						     ; dh - line num
    644						     ; dl - col	num
    645
    646	0343  8A 76 07				     mov dh, [bp + 7]
    647	0346  D0 EE				     shr dh, 1
    648	0348  80 C6 05				     add dh, FrameBegLine
    649
    650	034B  8A 6E 08				     mov ch, [bp + 8]
    651	034E  8A 56 06				     mov dl, [bp + 6]
    652	0351  2A D5				     sub dl, ch
    653	0353  D0 EA				     shr dl, 1
    654	0355  80 C2 14				     add dl, FrameBegCol
    655
    656	0358  8B 5E 04				     mov bx, [bp + 4]
    657
    658	035B  02 EA				     add ch, dl
    659
    660	035D  3A D5		     @@printchar:    cmp dl, ch
    661	035F  73 0C				     jae @@endprint
    662
    663	0361  53				     push bx
    664	0362  8A 0F				     mov cl, [bx]
    665	0364  E8 FDB0				     call ModSymbol
    666	0367  5B				     pop bx
    667
    668	0368  FE C2				     inc dl
    669	036A  43				     inc bx
    670
    671	036B  EB F0				     jmp @@printchar
    672
    673	036D			     @@endprint:
    674	036D  5D				     pop bp
    675	036E  C3				     ret
    676	036F					     endp
    677				     ;--------------------------------------
    678
    679
    680				     ;--------------------------------------
    681				     ; Gets hex	color from argv
    682				     ; GetColor(byte* color)
    683				     ; Entry:	     bx	= current symbol in argv
    684				     ; Assumes:
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 13
prog.asm



    685				     ; Effect:	     bx	- moves	it to next token
    686				     ; Destr:	     ax
    687				     ;--------------------------------------
    688	036F			     GetColor	     proc
    689
    690	036F  55				     push bp
    691	0370  8B EC				     mov bp, sp
    692
    693	0372  E8 FEC0				     call SkipSpaces
    694	0375  83 FB FF				     cmp bx, -1
    695	0378  74 0A				     je	@@GetColorEnd
    696
    697	037A  E8 FEF5				     call GetHexNumber
    698
    699	037D  53				     push bx
    700	037E  8B 5E 04				     mov bx, [bp + 4]
    701	0381  88 0F				     mov byte ptr [bx],	cl
    702	0383  5B				     pop bx
    703
    704	0384  5D		     @@GetColorEnd:  pop bp
    705	0385  C3				     ret
    706	0386					     endp
    707				     ;--------------------------------------
    708
    709				     ;======================================
    710	0386			     main:
    711	0386  FC				     cld
    712	0387  8B EC				     mov bp, sp
    713
    714	0389  BB B800				     mov bx, 0b800h
    715	038C  8E C3				     mov es, bx	; videomem seg
    716
    717	038E  E8 FE82				     call MakeConsoleBrightAgain
    718
    719						     ; locals:
    720						     ; [bp - 2]	 = width_height
    721						     ; [bp - 4]	 = color
    722						     ; [bp - 6]	 = style
    723						     ; [bp - 8]	 = text
    724						     ; [bp - 10] = text	len
    725	0391  83 EC 0A				     sub sp, 10
    726
    727	0394  BB 0081				     mov bx, ArgvAddr
    728
    729	0397  8D 46 FE				     lea ax, [bp - 2]
    730	039A  50				     push ax
    731	039B  E8 FF1F				     call GetWidthHeight
    732	039E  83 C4 02				     add sp, 2
    733	03A1  83 FB FF				     cmp bx, -1
    734	03A4  74 5B				     je	@@ErrNotEnoughArgs
    735
    736	03A6  8D 46 FC				     lea ax, [bp - 4]
    737	03A9  50				     push ax
    738	03AA  E8 FFC2				     call GetColor
    739	03AD  83 C4 02				     add sp, 2
    740	03B0  83 FB FF				     cmp bx, -1
    741	03B3  74 4C				     je	@@ErrNotEnoughArgs
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 14
prog.asm



    742
    743	03B5  8D 46 FA				     lea ax, [bp - 6]
    744	03B8  50				     push ax
    745	03B9  E8 FF25				     call GetStyle
    746	03BC  83 C4 02				     add sp, 2
    747	03BF  83 FB FF				     cmp bx, -1
    748	03C2  74 3D				     je	@@ErrNotEnoughArgs
    749
    750	03C4  8D 46 F6				     lea ax, [bp - 10]
    751	03C7  50				     push ax
    752	03C8  8D 46 F8				     lea ax, [bp - 8]
    753	03CB  50				     push ax
    754	03CC  E8 FF4B				     call GetText
    755	03CF  83 C4 04				     add sp, 4
    756	03D2  83 FB FF				     cmp bx, -1
    757	03D5  74 2A				     je	@@ErrNotEnoughArgs
    758
    759	03D7  FF 76 FC				     push [bp -	4]
    760	03DA  FF 76 FE				     push [bp -	2]
    761	03DD  FF 76 FA				     push [bp -	6]
    762	03E0  E8 FD5D				     call DrawFrame
    763	03E3  83 C4 06				     add sp, 6
    764
    765	03E6  FF 76 FE				     push [bp -	2]
    766	03E9  E8 FDF4				     call DrawShadow
    767	03EC  83 C4 02				     add sp, 2
    768
    769	03EF  FF 76 F6				     push [bp -	10]
    770	03F2  FF 76 FE				     push [bp -	2]
    771	03F5  FF 76 F8				     push [bp -	8]
    772	03F8  E8 FF45				     call PrintText
    773	03FB  83 C4 06				     add sp, 6
    774
    775	03FE  EB 01 90				     jmp @@ProgramEnd
    776
    777	0401			     @@ErrNotEnoughArgs:
    778						     ; TODO err	print
    779
    780
    781	0401  83 C4 0A		     @@ProgramEnd:   add sp, 10
    782						     EOP
1   783	0404  B8 4C00				     mov ax, 4c00h
1   784	0407  CD 21				     int 21h
    785
    786	0409  2F 2D 5C 7C 20 7C	5C+  Styles  db	"/-\| |\-/"
    787	      2D 2F
    788	0412  DA C4 BF B3 20 B3	C0+	     db	0dah, 0c4h, 0bfh, 0b3h,	Space, 0b3h, 0c0h, 0c4h, 0d9h ;	single frame
    789	      C4 D9
    790	041B  C9 CD BB BA 20 BA	C8+	     db	0c9h, 0cdh, 0bbh, 0bah,	Space, 0bah, 0c8h, 0cdh, 0bch ;	double frame
    791	      CD BC
    792	0424  03 03 03 03 20 03	03+	     db	003h, 003h, 003h, 003h,	Space, 003h, 003h, 003h, 003h ;	hearts
    793	      03 03
    794
    795
    796	      =004E		     FrameColorAttr  equ 4eh ; 01001110b
    797
    798
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 15
prog.asm



    799				     end	     Start
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 16
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/15/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "19:46:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CHDELSE			  Near	 DGROUP:02BA
@@CHDELSEIF			  Near	 DGROUP:02AD
@@CHDENDIF			  Near	 DGROUP:02BC
@@CHECKOK			  Near	 DGROUP:0234
@@DEFINEDSTYLE			  Near	 DGROUP:0302
@@ENDPRINT			  Near	 DGROUP:036D
@@ENDWHILE			  Near	 DGROUP:0243
@@ERRNOTENOUGHARGS		  Near	 DGROUP:0401
@@FUNCEND			  Near	 DGROUP:02DF
@@GETCOLOREND			  Near	 DGROUP:0384
@@GETDECEND			  Near	 DGROUP:0271
@@GETHEXEND			  Near	 DGROUP:029F
@@GETSTYLEEND			  Near	 DGROUP:0318
@@GETTEXTEND			  Near	 DGROUP:033E
@@PRINTCHAR			  Near	 DGROUP:035D
@@PROGRAMEND			  Near	 DGROUP:0401
@@WHILE				  Near	 DGROUP:0235
@@WRITESTYLE			  Near	 DGROUP:0311
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGCADDR			  Number 0080
ARGVADDR			  Number 0081
CHECKARGC			  Near	 DGROUP:0227
CONVERTHEXDIGIT			  Near	 DGROUP:02A0
DFLEWHILE			  Near	 DGROUP:0192
DFLEWHILEEND			  Near	 DGROUP:01A2
DFLWHILE			  Near	 DGROUP:01BE
DFLWHILEEND			  Near	 DGROUP:01CE
DFWHILE				  Near	 DGROUP:0160
DFWHILEEND			  Near	 DGROUP:0171
DRAWFRAME			  Near	 DGROUP:0140
DRAWFRAMEEMPTYLINE		  Near	 DGROUP:018B
DRAWFRAMELINE			  Near	 DGROUP:01A4
DRAWSHADOW			  Near	 DGROUP:01E0
DRAWSYMBOL			  Near	 DGROUP:0103
DSHORWHILE			  Near	 DGROUP:0205
DSHORWHILEEND			  Near	 DGROUP:0211
DSVERTWHILE			  Near	 DGROUP:01F1
DSVERTWHILEEND			  Near	 DGROUP:0203
FRAMEBEGCOL			  Number 0014
Turbo Assembler	 Version 4.1	    02/15/24 19:46:08	    Page 17
Symbol Table



FRAMEBEGLINE			  Number 0005
FRAMECOLORATTR			  Number 004E
GETCOLOR			  Near	 DGROUP:036F
GETDECIMALNUMBER		  Near	 DGROUP:0244
GETHEXNUMBER			  Near	 DGROUP:0272
GETSTYLE			  Near	 DGROUP:02E1
GETTEXT				  Near	 DGROUP:031A
GETWIDTHHEIGHT			  Near	 DGROUP:02BD
MAIN				  Near	 DGROUP:0386
MAKECONSOLEBRIGHTAGAIN		  Near	 DGROUP:0213
MCBAWHILE			  Near	 DGROUP:0218
MCBAWHILEEND			  Near	 DGROUP:0226
MODSYMBOL			  Near	 DGROUP:0117
MODSYMBOLATTR			  Near	 DGROUP:012B
NEWLINE				  Number 000D
PRINTTEXT			  Near	 DGROUP:0340
SCREENHEIGHT			  Number 001A
SCREENWIDTH			  Number 0050
SHADOWATTRMASK			  Number 0087
SKIPSPACES			  Near	 DGROUP:0235
SPACE				  Number 0020
START				  Near	 DGROUP:0100
STYLES				  Byte	 DGROUP:0409

Macro Name

EOP

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  042D Word	  Public  CODE
