Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 1
prog.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4				     org 100h
      5
      6				     locals @@
      7
      8				     include ..\macros.asm
1     9
1    10				     EOP     macro
1    11						     mov ax, 4c00h
1    12						     int 21h
1    13					     endm		     ; end of program
1    14
     15
     16	0100  E9 03AF		     Start:	     jmp main
     17
     18				     include ..\3-FUNCS\LIB.ASM
1    19				     ;--------------------------------------
1    20				     ; Counts string length
1    21				     ;
1    22				     ; word cdecl mystrlen(const byte* s)
1    23				     ;	     return ax;
1    24				     ;
1    25				     ; Assumes:
1    26				     ;
1    27				     ; Destr: ax, cx, es
1    28				     ;--------------------------------------
1    29
1    30	0103			     mystrlen	     proc
1    31
1    32	0103  55				     push bp
1    33	0104  8B EC				     mov bp, sp
1    34
1    35	0106  8C D8				     mov ax, ds
1    36	0108  8E C0				     mov es, ax	      ;	es = ds
1    37	010A  8B 7E 04				     mov di, [bp + 4] ;	di = offset s
1    38
1    39	010D  B9 FFFF				     mov cx, -1
1    40	0110  B0 24				     mov al, '$'
1    41	0112  F2> AE				     repne scasb
1    42
1    43	0114  F7 D9				     neg cx
1    44	0116  83 E9 02				     sub cx, 2
1    45	0119  8B C1				     mov ax, cx
1    46
1    47	011B  5D				     pop bp
1    48	011C  C3				     ret
1    49	011D					     endp
1    50				     ;--------------------------------------
1    51
1    52				     ;--------------------------------------
1    53				     ; Finds byte
1    54				     ;
1    55				     ; byte* cdecl mymemchr(const byte*	s, byte	c, word	n)
1    56				     ;	     return es:ax;
1    57				     ;
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 2
prog.asm



1    58				     ; Assumes:
1    59				     ;
1    60				     ; Destr: ax, cx, es
1    61				     ;--------------------------------------
1    62
1    63	011D			     mymemchr	     proc
1    64
1    65	011D  55				     push bp
1    66	011E  8B EC				     mov bp, sp
1    67
1    68	0120  8C D8				     mov ax, ds
1    69	0122  8E C0				     mov es, ax	      ;	es = ds
1    70
1    71
1    72	0124  8B 7E 04				     mov di, [bp + 4] ;	di = offset s
1    73
1    74
1    75	0127  8A 46 06				     mov al, [bp + 6] ;	al = c
1    76	012A  8B 4E 08				     mov cx, [bp + 8]
1    77	012D  41				     inc cx	      ;	cx = n + 1
1    78	012E  F2> AE				     repne scasb
1    79
1    80	0130  83 F9 00				     cmp cx, 0
1    81	0133  75 06				     jne @@IsFound
1    82	0135  B8 0000				     mov ax, 0
1    83	0138  EB 04 90				     jmp @@IsNotFound
1    84	013B			     @@IsFound:
1    85	013B  8D 45 FF				     lea ax, [di - 1]
1    86	013E			     @@IsNotFound:
1    87
1    88	013E  5D				     pop bp
1    89	013F  C3				     ret
1    90	0140					     endp
1    91				     ;--------------------------------------
1    92
1    93				     ;--------------------------------------
1    94				     ; Sets n bytes of memory with c
1    95				     ;
1    96				     ; byte* cdecl mymemset(const byte*	p, byte	c, word	n)
1    97				     ;	     return p;
1    98				     ;
1    99				     ; Assumes:
1   100				     ;
1   101				     ; Destr: ax, cx, es
1   102				     ;--------------------------------------
1   103
1   104	0140			     mymemset	     proc
1   105
1   106	0140  55				     push bp
1   107	0141  8B EC				     mov bp, sp
1   108
1   109	0143  8C D8				     mov ax, ds
1   110	0145  8E C0				     mov es, ax	      ;	es = ds
1   111
1   112	0147  8B 7E 04				     mov di, [bp + 4] ;	di = offset s
1   113
1   114	014A  8A 46 06				     mov al, [bp + 6] ;	al = c
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 3
prog.asm



1   115	014D  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   116	0150  F3> AA				     rep stosb
1   117
1   118	0152  8B 46 04				     mov ax, [bp + 4]
1   119
1   120	0155  5D				     pop bp
1   121	0156  C3				     ret
1   122	0157					     endp
1   123				     ;--------------------------------------
1   124
1   125				     ;--------------------------------------
1   126				     ; Copies n	bytes of src to	dest
1   127				     ;
1   128				     ; byte* cdecl mymemcpy(byte* dest,	const byte* src, word n)
1   129				     ;	     return dest;
1   130				     ;
1   131				     ; Assumes:
1   132				     ;
1   133				     ; Destr: ax, cx, es, si
1   134				     ;--------------------------------------
1   135
1   136	0157			     mymemcpy	     proc
1   137
1   138	0157  55				     push bp
1   139	0158  8B EC				     mov bp, sp
1   140
1   141	015A  8C D8				     mov ax, ds
1   142	015C  8E C0				     mov es, ax	      ;	es = ds
1   143
1   144	015E  8B 7E 04				     mov di, [bp + 4] ;	di = offset dest
1   145
1   146	0161  8B 76 06				     mov si, [bp + 6] ;	si = offset src
1   147	0164  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   148	0167  F3> A4				     rep movsb
1   149
1   150	0169  8B 46 04				     mov ax, [bp + 4]
1   151
1   152	016C  5D				     pop bp
1   153	016D  C3				     ret
1   154	016E					     endp
1   155				     ;--------------------------------------
1   156
1   157				     ;--------------------------------------
1   158				     ; Copies n	bytes of src to	dest. Also handles overlay
1   159				     ;
1   160				     ; byte* cdecl mymemmove(byte* dest, const byte* src, word n)
1   161				     ;	     return dest;
1   162				     ;
1   163				     ; Assumes:
1   164				     ;
1   165				     ; Destr: ax, cx, es, si
1   166				     ;--------------------------------------
1   167
1   168	016E			     mymemmove	     proc
1   169
1   170	016E  55				     push bp
1   171	016F  8B EC				     mov bp, sp
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 4
prog.asm



1   172
1   173	0171  8C D8				     mov ax, ds
1   174	0173  8E C0				     mov es, ax	      ;	es = ds
1   175
1   176	0175  8B 7E 04				     mov di, [bp + 4] ;	di = offset dest
1   177
1   178	0178  8B 76 06				     mov si, [bp + 6] ;	si = offset src
1   179	017B  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   180
1   181						     ; if (src < dest && dest <	src + n)
1   182	017E  3B F7				     cmp si, di
1   183	0180  73 15				     jae @@else
1   184
1   185	0182  8B C6				     mov ax, si
1   186	0184  03 C1				     add ax, cx
1   187	0186  3B F8				     cmp di, ax
1   188	0188  73 0D				     jae @@else
1   189
1   190	018A  03 F9				     add di, cx	; di +=	n - 1
1   191	018C  4F				     dec di
1   192	018D  03 F1				     add si, cx	; si +=	n - 1
1   193	018F  4E				     dec si
1   194	0190  FD				     std
1   195	0191  F3> A4				     rep movsb
1   196	0193  FC				     cld
1   197	0194  EB 03 90				     jmp @@endif
1   198
1   199	0197  F3> A4		     @@else:	     rep movsb
1   200	0199			     @@endif:
1   201
1   202	0199  8B 46 04				     mov ax, [bp + 4]
1   203
1   204	019C  5D				     pop bp
1   205	019D  C3				     ret
1   206	019E					     endp
1   207				     ;--------------------------------------
1   208
1   209				     ;--------------------------------------
1   210				     ; Compares	n bytes
1   211				     ;
1   212				     ; word cdecl mymemcmp(const byte* buf1, const byte* buf2, word n)
1   213				     ;	     return ax;
1   214				     ;
1   215				     ; Assumes:
1   216				     ;
1   217				     ; Destr: ax, cx, es
1   218				     ;--------------------------------------
1   219
1   220	019E			     mymemcmp	     proc
1   221
1   222	019E  55				     push bp
1   223	019F  8B EC				     mov bp, sp
1   224
1   225	01A1  8C D8				     mov ax, ds
1   226	01A3  8E C0				     mov es, ax	      ;	es = ds
1   227	01A5  8B 7E 04				     mov di, [bp + 4] ;	di = offset buf1
1   228	01A8  8B 76 06				     mov si, [bp + 6] ;	si = offset buf2
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 5
prog.asm



1   229	01AB  8B 4E 08				     mov cx, [bp + 8] ;	cx = n
1   230
1   231	01AE  F3> A6				     repe cmpsb
1   232
1   233	01B0  32 C0				     xor al, al
1   234	01B2  26: 8A 65	FF			     mov ah, es:[di - 1]
1   235	01B6  2A 64 FF				     sub ah, ds:[si - 1]
1   236
1   237	01B9  5D				     pop bp
1   238	01BA  C3				     ret
1   239	01BB					     endp
1   240				     ;--------------------------------------
1   241
    242
    243	      =0050		     ScreenWidth     equ 80
    244	      =001A		     ScreenHeight    equ 26
    245
    246	      =0087		     ShadowAttrMask  equ 10000111b
    247
    248	      =0020		     Space	     equ ' '
    249	      =000D		     NewLine	     equ 0dh
    250
    251	      =0005		     FrameBegLine    equ 5
    252	      =0014		     FrameBegCol     equ 20
    253
    254	      =0080		     ArgcAddr	     equ 0080h
    255	      =0081		     ArgvAddr	     equ 0081h
    256
    257				     ;--------------------------------------
    258				     ; Draws frame
    259				     ; Entry:	     bp	= style	str addr
    260				     ;		     cl	= width
    261				     ;		     ch	= height
    262				     ;		     dh	= color
    263				     ;
    264				     ; Assumes:	     es	= 0b800h
    265				     ; Destr:	     ax, bx, dh
    266				     ;--------------------------------------
    267	01BB			     DrawFrame	     proc
    268
    269	01BB  BB 0348				     mov bx, (FrameBegLine * ScreenWidth + FrameBegCol)	* 2
    270						     ; bx => x = 0; y =	0
    271
    272	01BE  E8 0056				     call DrawFrameEmptyLine
    273	01C1  81 C3 00A0			     add bx, ScreenWidth * 2
    274	01C5  32 E4				     xor ah, ah
    275	01C7  8A C1				     mov al, cl
    276	01C9  D1 E0				     shl ax, 1	; ax = width * 2
    277	01CB  2B D8				     sub bx, ax	; bx =>	x = 0; y = 1
    278
    279						     ; top line
    280	01CD  E8 0067				     call DrawFrameLine
    281	01D0  81 C3 00A0			     add bx, ScreenWidth * 2
    282	01D4  32 E4				     xor ah, ah
    283	01D6  8A C1				     mov al, cl
    284	01D8  D1 E0				     shl ax, 1	; ax = width * 2
    285	01DA  2B D8				     sub bx, ax	; bx =>	x = 0; y = 2
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 6
prog.asm



    286
    287						     ; middle lines
    288	01DC  83 C5 03				     add bp, 3
    289
    290	01DF  B8 00A0				     mov ax, ScreenWidth * 2
    291	01E2  F6 E5				     mul ch
    292	01E4  2D 0280				     sub ax, (4	* ScreenWidth) * 2
    293	01E7  03 C3				     add ax, bx
    294
    295	01E9  EB 12 90				     jmp @@DFwhileClause
    296	01EC			     @@DFwhile:
    297	01EC  50				     push ax ; save ax
    298	01ED  E8 0047				     call DrawFrameLine
    299	01F0  81 C3 00A0			     add bx, ScreenWidth * 2
    300	01F4  32 E4				     xor ah, ah
    301	01F6  8A C1				     mov al, cl
    302	01F8  D1 E0				     shl ax, 1
    303	01FA  2B D8				     sub bx, ax
    304
    305	01FC  58				     pop ax ; restore ax
    306	01FD			     @@DFwhileClause:
    307	01FD  3B D8				     cmp bx, ax
    308	01FF  72 EB				     jb	@@DFwhile
    309
    310						     ; bottom line
    311	0201  83 C5 03				     add bp, 3
    312
    313	0204  E8 0030				     call DrawFrameLine
    314	0207  81 C3 00A0			     add bx, ScreenWidth * 2
    315	020B  32 E4				     xor ah, ah
    316	020D  8A C1				     mov al, cl
    317	020F  D1 E0				     shl ax, 1
    318	0211  2B D8				     sub bx, ax
    319
    320	0213  E8 0001				     call DrawFrameEmptyLine
    321
    322	0216  C3				     ret
    323	0217					     endp
    324				     ;---------------------------------------
    325
    326				     ;--------------------------------------
    327				     ; Draws one empty line of frame
    328				     ; DrawFrameEmptyLine
    329				     ; Entry:	     bx	= line beginning symbol	addr
    330				     ;		     cl	= width
    331				     ;		     ch	= height
    332				     ;		     dh	= color
    333				     ;
    334				     ; Assumes:	     es	= 0b800h
    335				     ;
    336				     ; Destr:	     ax, dl
    337				     ; Return:	     bx	= symbol after the last	symbol in the line
    338				     ;-------------------------------------
    339
    340	0217			     DrawFrameEmptyLine	     proc
    341
    342	0217  B2 20				     mov dl, Space
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 7
prog.asm



    343
    344	0219  26: 89 17				     mov es:[bx], dx
    345	021C  83 C3 02				     add bx, 2
    346
    347	021F  33 C0				     xor ax, ax
    348	0221  8A C1				     mov al, cl
    349	0223  2C 01				     sub al, 1
    350	0225  D1 E0				     shl ax, 1
    351	0227  03 C3				     add ax, bx
    352
    353	0229  EB 07 90				     jmp @@DFLEwhileClause
    354	022C			     @@DFLEwhile:
    355	022C  26: 89 17				     mov es:[bx], dx
    356	022F  83 C3 02				     add bx, 2
    357
    358	0232			     @@DFLEwhileClause:
    359	0232  3B D8				     cmp bx, ax
    360	0234  72 F6				     jb	@@DFLEwhile
    361
    362	0236  C3				     ret
    363	0237					     endp
    364				     ;--------------------------------------
    365
    366				     ;--------------------------------------
    367				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    368				     ; DrawDrameLine
    369				     ; Entry:	     bp	= style	str addr
    370				     ;		     bx	= line beginning symbol	addr
    371				     ;		     cl	= width
    372				     ;		     ch	= height
    373				     ;		     dh	= color
    374				     ;
    375				     ; Assumes:	     es	= 0b800h
    376				     ;		     ds	allows to reach	style_str
    377				     ;
    378				     ; Destr:	     ax, dl
    379				     ; Return:	     bx	= symbol after the last	symbol in the line
    380				     ;-------------------------------------
    381
    382	0237			     DrawFrameLine   proc
    383
    384						     ; write empty symbol
    385	0237  B2 20				     mov dl, Space
    386	0239  26: 89 17				     mov es:[bx], dx
    387	023C  83 C3 02				     add bx, 2
    388
    389						     ; write left symbol
    390	023F  8A 56 00				     mov dl, [bp]
    391	0242  26: 89 17				     mov es:[bx], dx
    392	0245  83 C3 02				     add bx, 2
    393
    394	0248  8A 56 01				     mov dl, [bp + 1]
    395
    396
    397	024B  33 C0				     xor ax, ax
    398	024D  8A C1				     mov al, cl
    399	024F  2C 04				     sub al, 2 * 2
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 8
prog.asm



    400	0251  D1 E0				     shl ax, 1
    401	0253  03 C3				     add ax, bx
    402
    403	0255  EB 07 90				     jmp @@DFLwhileClause
    404	0258			     @@DFLwhile:
    405	0258  26: 89 17				     mov es:[bx], dx
    406	025B  83 C3 02				     add bx, 2
    407
    408	025E			     @@DFLwhileClause:
    409	025E  3B D8				     cmp bx, ax
    410	0260  72 F6				     jb	@@DFLwhile
    411
    412						     ; write right symbol
    413	0262  8A 56 02				     mov dl, [bp + 2]
    414	0265  26: 89 17				     mov es:[bx], dx
    415	0268  83 C3 02				     add bx, 2
    416
    417						     ; write empty symbol
    418	026B  B2 20				     mov dl, Space
    419	026D  26: 89 17				     mov es:[bx], dx
    420	0270  83 C3 02				     add bx, 2
    421
    422	0273  C3				     ret
    423	0274					     endp
    424				     ;--------------------------------------
    425
    426				     ;--------------------------------------
    427				     ; Draws shadow
    428				     ; DrawShadow
    429				     ; Entry:	     cl	= width
    430				     ;		     ch	= height
    431				     ;
    432				     ; Assumes:	     es	= 0b800h
    433				     ;
    434				     ; Destr:	     ax, bx
    435				     ;--------------------------------------
    436	0274			     DrawShadow	     proc
    437
    438	0274  32 FF				     xor bh, bh
    439	0276  8A D9				     mov bl, cl
    440	0278  81 C3 01F4			     add bx, ScreenWidth * (FrameBegLine + 1) +	FrameBegCol
    441	027C  D1 E3				     shl bx, 1
    442
    443	027E  B8 00A0				     mov ax, ScreenWidth * 2
    444	0281  F6 E5				     mul ch
    445	0283  2D 00A0				     sub ax, ScreenWidth * 2
    446	0286  03 C3				     add ax, bx
    447
    448	0288  EB 0F 90				     jmp @@DSVwhileClause
    449	028B			     @@DSVwhile:
    450	028B  26: 80 67	01 87			     and byte ptr es:[bx + 1], ShadowAttrMask
    451	0290  26: 80 67	03 87			     and byte ptr es:[bx + 3], ShadowAttrMask
    452
    453	0295  81 C3 00A0			     add bx, ScreenWidth * 2
    454
    455	0299			     @@DSVwhileClause:
    456	0299  3B D8				     cmp bx, ax
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 9
prog.asm



    457	029B  72 EE				     jb	@@DSVwhile
    458
    459	029D  83 C3 02				     add bx, 2
    460
    461	02A0  32 E4				     xor ah, ah
    462	02A2  8A C1				     mov al, cl
    463	02A4  D1 E0				     shl ax, 1
    464	02A6  2B C3				     sub ax, bx
    465	02A8  F7 D8				     neg ax
    466
    467	02AA  EB 09 90				     jmp @@DSHwhileClause
    468	02AD			     @@DSHwhile:
    469	02AD  26: 80 67	01 87			     and byte ptr es:[bx + 1], ShadowAttrMask
    470	02B2  83 EB 02				     sub bx, 2
    471
    472	02B5			     @@DSHwhileClause:
    473	02B5  3B D8				     cmp bx, ax
    474	02B7  77 F4				     ja	@@DSHwhile
    475
    476	02B9  C3				     ret
    477	02BA					     endp
    478				     ;--------------------------------------
    479
    480				     ;--------------------------------------
    481				     ; Paints console in blue
    482				     ;
    483				     ; Entry:
    484				     ; Assumes:	     es	= 0b800h
    485				     ; Destr:	     ch, bx
    486				     ;--------------------------------------
    487	02BA			     MakeConsoleBrightAgain  proc
    488
    489	02BA  B5 1F				     mov ch, 00011111b
    490	02BC  BB 0001				     mov bx, 1
    491
    492	02BF  81 FB 1040	     MCBAwhile:	     cmp bx, ScreenHeight * ScreenWidth	* 2
    493	02C3  77 08				     ja	MCBAwhileEnd
    494
    495	02C5  26: 88 2F				     mov byte ptr es:[bx], ch
    496	02C8  83 C3 02				     add bx, 2
    497
    498	02CB  EB F2				     jmp MCBAwhile
    499	02CD			     MCBAwhileEnd:
    500
    501	02CD  C3				     ret
    502	02CE					     endp
    503				     ;--------------------------------------
    504
    505				     include INTERF~1.ASM
1   506				     ;--------------------------------------
1   507				     ; Checks if argc is exceeded
1   508				     ;
1   509				     ; Entry:	     bx	= current symbol in argv
1   510				     ; Effect:	     bx	= -1 if	argc is	exceeded
1   511				     ; Destr:	     ax
1   512				     ;--------------------------------------
1   513	02CE			     CheckArgc	     proc
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 10
prog.asm



1   514
1   515						     ; bx < *argc + argv
1   516	02CE  32 E4				     xor ah, ah
1   517	02D0  A0 0080				     mov al, ds:[ArgcAddr]
1   518	02D3  05 0081				     add ax, ArgvAddr
1   519	02D6  3B D8				     cmp bx, ax
1   520	02D8  72 03				     jb	@@CheckOK
1   521
1   522	02DA  BB FFFF				     mov bx, -1
1   523	02DD			     @@CheckOK:
1   524	02DD  C3				     ret
1   525	02DE					     endp
1   526
1   527
1   528				     ;--------------------------------------
1   529
1   530				     ;--------------------------------------
1   531				     ; Skips spaces in argv. Also stops	and puts bx to -1 if argc is exceeded
1   532				     ;
1   533				     ; Entry:	     bx	= current symbol in argv
1   534				     ; Assumes:
1   535				     ; Effect:	     bx	- moves	it to next non space symbol
1   536				     ; Destr:	     ax
1   537				     ;--------------------------------------
1   538	02DE			     SkipSpaces	     proc
1   539
1   540	02DE  80 3F 20		     @@while:	     cmp byte ptr [bx],	Space
1   541	02E1  75 09				     jne @@endwhile
1   542
1   543	02E3  43				     inc bx
1   544
1   545	02E4  E8 FFE7				     call CheckArgc
1   546	02E7  83 FB FF				     cmp bx, -1
1   547	02EA  75 F2				     jne @@while
1   548	02EC			     @@endwhile:
1   549	02EC  C3				     ret
1   550	02ED					     endp
1   551				     ;--------------------------------------
1   552
1   553				     ;--------------------------------------
1   554				     ; Gets decimal number into	cl from	argv
1   555				     ; Entry:	     bx	= current symbol in argv
1   556				     ; Assumes:
1   557				     ; Effect:	     bx	- moves	it to the symbol after number
1   558				     ;		     cl	- returns number
1   559				     ;
1   560				     ; Destr:	     ax, cl
1   561				     ;--------------------------------------
1   562	02ED			     GetDecimalNumber proc
1   563
1   564	02ED  E8 FFEE				     call SkipSpaces
1   565	02F0  E8 FFDB				     call CheckArgc
1   566	02F3  83 FB FF				     cmp bx, -1
1   567	02F6  74 25				     je	@@GetDecEnd
1   568
1   569	02F8  8A 0F				     mov cl, [bx]
1   570	02FA  80 E9 30				     sub cl, '0'
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 11
prog.asm



1   571	02FD  43				     inc bx
1   572
1   573	02FE  80 3F 20				     cmp byte ptr [bx],	Space
1   574	0301  74 1A				     je	@@GetDecEnd
1   575	0303  80 3F 0D				     cmp byte ptr [bx],	NewLine
1   576	0306  74 15				     je	@@GetDecEnd
1   577
1   578	0308  E8 FFC3				     call CheckArgc
1   579	030B  83 FB FF				     cmp bx, -1
1   580	030E  74 0D				     je	@@GetDecEnd
1   581
1   582	0310  B0 0A				     mov al, 10
1   583	0312  F6 E1				     mul cl
1   584	0314  8A C8				     mov cl, al
1   585
1   586	0316  8A 0F				     mov cl, [bx]
1   587	0318  2C 30				     sub al, '0'
1   588	031A  02 C8				     add cl, al
1   589
1   590	031C  43				     inc bx
1   591	031D			     @@GetDecEnd:
1   592	031D  C3				     ret
1   593	031E					     endp
1   594				     ;--------------------------------------
1   595
1   596				     ;--------------------------------------
1   597				     ; Gets hex	number into cl from argv
1   598				     ; Entry:	     bx	= current symbol in argv
1   599				     ; Assumes:
1   600				     ; Effect:	     bx	- moves	it to the symbol after number
1   601				     ;		     cl	- returns number
1   602				     ;
1   603				     ; Destr:	     ax, cl
1   604				     ;--------------------------------------
1   605	031E			     GetHexNumber proc
1   606
1   607	031E  E8 FFBD				     call SkipSpaces
1   608	0321  E8 FFAA				     call CheckArgc
1   609	0324  83 FB FF				     cmp bx, -1
1   610	0327  74 25				     je	@@GetHexEnd
1   611
1   612	0329  8A 07				     mov al, [bx]
1   613	032B  E8 0021				     call ConvertHexDigit
1   614	032E  8A C8				     mov cl, al
1   615	0330  43				     inc bx
1   616
1   617	0331  80 3F 20				     cmp byte ptr [bx],	Space
1   618	0334  74 18				     je	@@GetHexEnd
1   619	0336  80 3F 0D				     cmp byte ptr [bx],	NewLine
1   620	0339  74 13				     je	@@GetHexEnd
1   621
1   622	033B  E8 FF90				     call CheckArgc
1   623	033E  83 FB FF				     cmp bx, -1
1   624	0341  74 0B				     je	@@GetHexEnd
1   625
1   626	0343  C0 E1 04				     shl cl, 4
1   627
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 12
prog.asm



1   628	0346  8A 07				     mov al, [bx]
1   629	0348  E8 0004				     call ConvertHexDigit
1   630	034B  02 C8				     add cl, al
1   631
1   632	034D  43				     inc bx
1   633	034E			     @@GetHexEnd:
1   634	034E  C3				     ret
1   635	034F					     endp
1   636				     ;--------------------------------------
1   637
1   638				     ;--------------------------------------
1   639				     ; Converts	hex digit in al
1   640				     ; Entry:	     al	- symbol
1   641				     ; Assumes:
1   642				     ; Effect:	     al	- number
1   643				     ;
1   644				     ; Destr:
1   645				     ;--------------------------------------
1   646	034F			     ConvertHexDigit proc
1   647
1   648						     ; if ('0' <= al &&	al <= '9')
1   649	034F  3C 30				     cmp al, '0'
1   650	0351  72 09				     jb	@@CHDelseif
1   651	0353  3C 39				     cmp al, '9'
1   652	0355  77 05				     ja	@@CHDelseif
1   653
1   654	0357  2C 30				     sub al, '0'
1   655	0359  EB 10 90				     jmp @@CHDendif
1   656	035C			     @@CHDelseif:
1   657						     ; else if ('a' <= al && al	<= 'f')
1   658	035C  3C 61				     cmp al, 'a'
1   659	035E  72 09				     jb	@@CHDelse
1   660	0360  3C 66				     cmp al, 'f'
1   661	0362  77 05				     ja	@@CHDelse
1   662
1   663	0364  2C 57				     sub al, 'a' - 10
1   664	0366  EB 03 90				     jmp @@CHDendif
1   665	0369			     @@CHDelse:
1   666	0369  2C 37				     sub al, 'A' - 10
1   667	036B			     @@CHDendif:
1   668	036B  C3				     ret
1   669	036C					     endp
1   670				     ;--------------------------------------
1   671
1   672				     ;--------------------------------------
1   673				     ; Gets width and height from argv
1   674				     ; GetWidthHeight(word* width_height)
1   675				     ; Entry:	     bx	= current symbol in argv
1   676				     ; Assumes:
1   677				     ; Effect:	     bx	- moves	it to next token
1   678				     ; Destr:	     ax, cl
1   679				     ;--------------------------------------
1   680	036C			     GetWidthHeight  proc
1   681
1   682	036C  55				     push bp
1   683	036D  8B EC				     mov bp, sp
1   684
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 13
prog.asm



1   685	036F  E8 FF7B				     call GetDecimalNumber
1   686	0372  83 FB FF				     cmp bx, -1
1   687	0375  74 17				     je	@@FuncEnd
1   688
1   689	0377  53				     push bx
1   690	0378  8B 5E 04				     mov bx, [bp + 4]
1   691	037B  88 0F				     mov byte ptr [bx],	cl
1   692	037D  5B				     pop bx
1   693
1   694	037E  E8 FF6C				     call GetDecimalNumber
1   695	0381  83 FB FF				     cmp bx, -1
1   696	0384  74 08				     je	@@FuncEnd
1   697
1   698	0386  53				     push bx
1   699	0387  8B 5E 04				     mov bx, [bp + 4]
1   700	038A  88 4F 01				     mov byte ptr [bx +	1], cl
1   701	038D  5B				     pop bx
1   702
1   703	038E  5D		     @@FuncEnd:	     pop bp
1   704	038F  C3				     ret
1   705	0390					     endp
1   706				     ;--------------------------------------
1   707
1   708				     ;--------------------------------------
1   709				     ; Gets frame style	from argv
1   710				     ; GetStyle(char* style)
1   711				     ; Entry:	     bx	= current symbol in argv
1   712				     ; Assumes:
1   713				     ; Effect:	     bx	- moves	it to next token
1   714				     ; Destr:	     ax, cx, dx
1   715				     ;--------------------------------------
1   716	0390			     GetStyle	     proc
1   717
1   718	0390  55				     push bp
1   719	0391  8B EC				     mov bp, sp
1   720
1   721	0393  E8 FF48				     call SkipSpaces
1   722	0396  E8 FF35				     call CheckArgc
1   723	0399  83 FB FF				     cmp bx, -1
1   724	039C  74 2C				     je	@@GetStyleEnd
1   725
1   726	039E  80 3F 2A				     cmp byte ptr [bx],	'*'
1   727	03A1  75 11				     jne @@DefinedStyle
1   728
1   729	03A3  43				     inc bx
1   730	03A4  E8 FF27				     call CheckArgc
1   731	03A7  83 FB FF				     cmp bx, -1
1   732	03AA  74 1E				     je	@@GetStyleEnd
1   733
1   734	03AC  8B CB				     mov cx, bx
1   735	03AE  83 C3 09				     add bx, 9
1   736
1   737	03B1  EB 10 90				     jmp @@WriteStyle
1   738
1   739	03B4			     @@DefinedStyle:
1   740	03B4  B0 09				     mov al, 9
1   741	03B6  8A 27				     mov ah, [bx]
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 14
prog.asm



1   742	03B8  80 EC 30				     sub ah, '0'
1   743	03BB  F6 E4				     mul ah
1   744
1   745	03BD  43				     inc bx
1   746
1   747	03BE  B9 053Dr				     mov cx, offset Styles
1   748	03C1  03 C8				     add cx, ax
1   749
1   750	03C3			     @@WriteStyle:
1   751	03C3  53				     push bx
1   752	03C4  8B 5E 04				     mov bx, [bp + 4]
1   753	03C7  89 0F				     mov word ptr [bx],	cx
1   754	03C9  5B				     pop bx
1   755
1   756	03CA  5D		     @@GetStyleEnd:  pop bp
1   757	03CB  C3				     ret
1   758	03CC					     endp
1   759				     ;--------------------------------------
1   760
1   761				     ;--------------------------------------
1   762				     ; Gets text from argv
1   763				     ; GetText(byte* header, byte* text, word* header_len_text_len)
1   764				     ; Entry:	     bx	= current symbol in argv
1   765				     ; Assumes:
1   766				     ; Effect:
1   767				     ; Destr:	     ax, bx, dx
1   768				     ;--------------------------------------
1   769	03CC			     GetText proc
1   770
1   771	03CC  55				     push bp
1   772	03CD  8B EC				     mov bp, sp
1   773
1   774	03CF  E8 FF0C				     call SkipSpaces
1   775	03D2  83 FB FF				     cmp bx, -1
1   776	03D5  74 5C				     je	@@GetTextEnd
1   777
1   778	03D7  53				     push bx
1   779	03D8  8B C3				     mov ax, bx
1   780	03DA  8B 5E 04				     mov bx, [bp + 4]
1   781	03DD  89 07				     mov word ptr [bx],	ax
1   782	03DF  5B				     pop bx
1   783
1   784	03E0  53				     push bx
1   785	03E1  81 EB 0081			     sub bx, ArgvAddr
1   786	03E5  8A 16 0080			     mov dl, ds:[ArgcAddr]
1   787	03E9  2A D3				     sub dl, bl	; dl = len(header + ':'	+ text)
1   788	03EB  5B				     pop bx
1   789
1   790	03EC  06				     push es
1   791	03ED  32 F6				     xor dh, dh
1   792	03EF  52				     push dx
1   793	03F0  6A 3A				     push ':'
1   794	03F2  53				     push bx
1   795	03F3  E8 FD27				     call mymemchr
1   796	03F6  83 C4 06				     add sp, 6
1   797	03F9  07				     pop es
1   798
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 15
prog.asm



1   799
1   800	03FA  3D 0000				     cmp ax, 0
1   801	03FD  74 24				     je	@@NoText
1   802
1   803						     ; cnt len
1   804	03FF  8B C8				     mov cx, ax
1   805	0401  2B CB				     sub cx, bx	; cx = len(header)
1   806
1   807	0403  8B D8				     mov bx, ax
1   808	0405  43				     inc bx
1   809
1   810	0406  53				     push bx
1   811	0407  8B 5E 08				     mov bx, [bp + 8]
1   812	040A  88 0F				     mov byte ptr [bx],	cl
1   813
1   814	040C  2A D1				     sub dl, cl
1   815	040E  FE CA				     dec dl ; dl = len(text)
1   816
1   817	0410  8B 5E 08				     mov bx, [bp + 8]
1   818	0413  88 57 01				     mov byte ptr [bx +	1], dl
1   819	0416  5B				     pop bx
1   820
1   821	0417  53				     push bx
1   822	0418  8B C3				     mov ax, bx
1   823	041A  8B 5E 06				     mov bx, [bp + 6]
1   824	041D  89 07				     mov word ptr [bx],	ax
1   825	041F  5B				     pop bx
1   826
1   827	0420  EB 11 90				     jmp @@GetTextEnd
1   828	0423			     @@NoText:
1   829
1   830	0423  53				     push bx
1   831	0424  8B 5E 08				     mov bx, [bp + 8]
1   832	0427  32 F6				     xor dh, dh
1   833	0429  89 17				     mov word ptr [bx],	dx
1   834
1   835	042B  8B 5E 06				     mov bx, [bp + 6]
1   836	042E  C7 07 0000			     mov word ptr [bx],	0
1   837
1   838	0432  5B				     pop bx
1   839
1   840
1   841	0433  5D		     @@GetTextEnd:   pop bp
1   842	0434  C3				     ret
1   843	0435					     endp
1   844				     ;--------------------------------------
1   845
1   846				     ;--------------------------------------
1   847				     ; Draws symbol wirhout changing attributes
1   848				     ; Entry:	     dh	- line num
1   849				     ;		     dl	- col num
1   850				     ;		     cl	- symbol
1   851				     ; Assumes:	     es	= 0b800h
1   852				     ; Destr:	     ax, bx
1   853				     ;--------------------------------------
1   854	0435			     ModSymbol	     proc
1   855
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 16
prog.asm



1   856	0435  8A C6				     mov al, dh
1   857	0437  B3 50				     mov bl, ScreenWidth
1   858	0439  F6 E3				     mul bl	; ax = dh * ScreenWidth
1   859
1   860	043B  33 DB				     xor bx, bx
1   861	043D  8A DA				     mov bl, dl
1   862	043F  03 C3				     add ax, bx	; ax +=	dl (col	num)
1   863
1   864	0441  D1 E0				     shl ax, 1 ; ax *= 2
1   865
1   866	0443  8B D8				     mov bx, ax
1   867	0445  26: 88 0F				     mov byte ptr es:[bx], cl
1   868
1   869	0448  C3				     ret
1   870	0449					     endp
1   871				     ;--------------------------------------
1   872
1   873				     ;--------------------------------------
1   874				     ; Entry:	     dl	= col num
1   875				     ;		     dh	= line num
1   876				     ;		     ch	= line end ptr
1   877				     ;		     bx	= str
1   878				     ;
1   879				     ; Destr:	     cl, dl, bx
1   880				     ;--------------------------------------
1   881	0449			     PrintLine	     proc
1   882
1   883	0449  3A D5		     @@printchar:    cmp dl, ch
1   884	044B  73 0C				     jae @@endprint
1   885
1   886	044D  53				     push bx
1   887	044E  8A 0F				     mov cl, [bx]
1   888	0450  E8 FFE2				     call ModSymbol
1   889	0453  5B				     pop bx
1   890
1   891	0454  FE C2				     inc dl
1   892	0456  43				     inc bx
1   893
1   894	0457  EB F0				     jmp @@printchar
1   895
1   896	0459			     @@endprint:
1   897	0459  C3				     ret
1   898	045A					     endp
1   899
1   900				     ;--------------------------------------
1   901
1   902				     ;--------------------------------------
1   903				     ; Prints text
1   904				     ; GetText(byte* header, byte* text, word width_height, word header_len_text_len)
1   905				     ; Entry:
1   906				     ; Assumes:	     es	= 0b800h
1   907				     ; Effect:
1   908				     ; Destr:	     ax, bx, cx, dx
1   909				     ;--------------------------------------
1   910	045A			     PrintText	     proc
1   911
1   912	045A  55				     push bp
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 17
prog.asm



1   913	045B  8B EC				     mov bp, sp
1   914
1   915						     ; dh - line num
1   916						     ; dl - col	num
1   917
1   918	045D  B6 06				     mov dh, FrameBegLine + 1
1   919
1   920	045F  8A 6E 0A				     mov ch, [bp + 10] ; ch = header_len
1   921	0462  8A 56 08				     mov dl, [bp + 8]
1   922	0465  2A D5				     sub dl, ch
1   923	0467  D0 EA				     shr dl, 1
1   924	0469  80 C2 14				     add dl, FrameBegCol
1   925
1   926	046C  8B 5E 04				     mov bx, [bp + 4]  ; bx = header
1   927
1   928	046F  02 EA				     add ch, dl	       ; ch = header_len + col_num
1   929
1   930	0471  E8 FFD5				     call PrintLine    ; header
1   931
1   932
1   933	0474  8A 6E 0B				     mov ch, [bp + 11] ; ch = text_len
1   934
1   935	0477  80 FD 00				     cmp ch, 0
1   936	047A  74 1A				     je	@@PrintNoText
1   937
1   938	047C  8A 56 08				     mov dl, [bp + 8]
1   939	047F  2A D5				     sub dl, ch
1   940	0481  D0 EA				     shr dl, 1
1   941	0483  80 C2 14				     add dl, FrameBegCol
1   942
1   943	0486  8A 76 09				     mov dh, [bp + 9]
1   944	0489  D0 EE				     shr dh, 1
1   945	048B  80 C6 05				     add dh, FrameBegLine
1   946
1   947	048E  8B 5E 06				     mov bx, [bp + 6]  ; bx = text
1   948
1   949	0491  02 EA				     add ch, dl	       ; ch = text_len + col_num
1   950
1   951	0493  E8 FFB3				     call PrintLine    ; text
1   952
1   953	0496  5D		     @@PrintNoText:  pop bp
1   954	0497  C3				     ret
1   955	0498					     endp
1   956				     ;--------------------------------------
1   957
1   958				     ;--------------------------------------
1   959				     ; Gets hex	color from argv
1   960				     ; GetColor(byte* color)
1   961				     ; Entry:	     bx	= current symbol in argv
1   962				     ; Assumes:
1   963				     ; Effect:	     bx	- moves	it to next token
1   964				     ; Destr:	     ax
1   965				     ;--------------------------------------
1   966	0498			     GetColor	     proc
1   967
1   968	0498  55				     push bp
1   969	0499  8B EC				     mov bp, sp
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 18
prog.asm



1   970
1   971	049B  E8 FE40				     call SkipSpaces
1   972	049E  E8 FE2D				     call CheckArgc
1   973	04A1  83 FB FF				     cmp bx, -1
1   974	04A4  74 0A				     je	@@GetColorEnd
1   975
1   976	04A6  E8 FE75				     call GetHexNumber
1   977
1   978	04A9  53				     push bx
1   979	04AA  8B 5E 04				     mov bx, [bp + 4]
1   980	04AD  88 0F				     mov byte ptr [bx],	cl
1   981	04AF  5B				     pop bx
1   982
1   983	04B0  5D		     @@GetColorEnd:  pop bp
1   984	04B1  C3				     ret
1   985	04B2					     endp
1   986				     ;--------------------------------------
1   987
    988
    989				     ;======================================
    990	04B2			     main:
    991	04B2  FC				     cld
    992	04B3  8B EC				     mov bp, sp
    993
    994	04B5  BB B800				     mov bx, 0b800h
    995	04B8  8E C3				     mov es, bx	; videomem seg
    996
    997	04BA  E8 FDFD				     call MakeConsoleBrightAgain
    998
    999						     ; locals:
   1000						     ; [bp - 2]	 = width_height
   1001						     ; [bp - 4]	 = color
   1002						     ; [bp - 6]	 = style
   1003						     ; [bp - 8]	 = header
   1004						     ; [bp - 10] = text
   1005						     ; [bp - 12] = header_len_text_len
   1006	04BD  83 EC 0C				     sub sp, 12
   1007
   1008	04C0  BB 0081				     mov bx, ArgvAddr
   1009
   1010	04C3  8D 46 FE				     lea ax, [bp - 2]
   1011	04C6  50				     push ax
   1012	04C7  E8 FEA2				     call GetWidthHeight
   1013	04CA  83 C4 02				     add sp, 2
   1014	04CD  83 FB FF				     cmp bx, -1
   1015	04D0  74 5C				     je	@@ErrNotEnoughArgs
   1016
   1017	04D2  8D 46 FC				     lea ax, [bp - 4]
   1018	04D5  50				     push ax
   1019	04D6  E8 FFBF				     call GetColor
   1020	04D9  83 C4 02				     add sp, 2
   1021	04DC  83 FB FF				     cmp bx, -1
   1022	04DF  74 4D				     je	@@ErrNotEnoughArgs
   1023
   1024	04E1  8D 46 FA				     lea ax, [bp - 6]
   1025	04E4  50				     push ax
   1026	04E5  E8 FEA8				     call GetStyle
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 19
prog.asm



   1027	04E8  83 C4 02				     add sp, 2
   1028	04EB  83 FB FF				     cmp bx, -1
   1029	04EE  74 3E				     je	@@ErrNotEnoughArgs
   1030
   1031	04F0  8D 46 F4				     lea ax, [bp - 12]
   1032	04F3  50				     push ax
   1033	04F4  8D 46 F6				     lea ax, [bp - 10]
   1034	04F7  50				     push ax
   1035	04F8  8D 46 F8				     lea ax, [bp - 8]
   1036	04FB  50				     push ax
   1037	04FC  E8 FECD				     call GetText
   1038	04FF  83 C4 06				     add sp, 6
   1039	0502  83 FB FF				     cmp bx, -1
   1040	0505  74 27				     je	@@ErrNotEnoughArgs
   1041
   1042	0507  55				     push bp ; save bp
   1043	0508  8B 4E FE				     mov cx, [bp - 2] ;	width_height
   1044	050B  8A 76 FC				     mov dh, [bp - 4] ;	color attr
   1045	050E  FF 76 FA				     push [bp -	6]
   1046	0511  5D				     pop bp	      ;	style
   1047	0512  E8 FCA6				     call DrawFrame
   1048	0515  5D				     pop bp ; restore bp
   1049
   1050	0516  E8 FD5B				     call DrawShadow
   1051
   1052	0519  FF 76 F4				     push [bp -	12]
   1053	051C  FF 76 FE				     push [bp -	2]
   1054	051F  FF 76 F6				     push [bp -	10]
   1055	0522  FF 76 F8				     push [bp -	8]
   1056	0525  E8 FF32				     call PrintText
   1057	0528  83 C4 08				     add sp, 8
   1058
   1059	052B  EB 08 90				     jmp @@ProgramEnd
   1060
   1061	052E			     @@ErrNotEnoughArgs:
   1062						     ; TODO err	print
   1063	052E  B4 09				     mov ah, 09h
   1064	0530  BA 0561r				     mov dx, offset ErrNotEnoughArgsStr
   1065	0533  CD 21				     int 21h
   1066
   1067	0535  83 C4 0C		     @@ProgramEnd:   add sp, 12
   1068						     EOP
1  1069	0538  B8 4C00				     mov ax, 4c00h
1  1070	053B  CD 21				     int 21h
   1071
   1072	053D  2F 2D 5C 7C 20 7C	5C+  Styles  db	"/-\| |\-/"
   1073	      2D 2F
   1074	0546  DA C4 BF B3 20 B3	C0+	     db	0dah, 0c4h, 0bfh, 0b3h,	Space, 0b3h, 0c0h, 0c4h, 0d9h ;	single frame
   1075	      C4 D9
   1076	054F  C9 CD BB BA 20 BA	C8+	     db	0c9h, 0cdh, 0bbh, 0bah,	Space, 0bah, 0c8h, 0cdh, 0bch ;	double frame
   1077	      CD BC
   1078	0558  03 03 03 03 20 03	03+	     db	003h, 003h, 003h, 003h,	Space, 003h, 003h, 003h, 003h ;	hearts
   1079	      03 03
   1080
   1081	0561  4E 6F 74 20 65 6E	6F+  ErrNotEnoughArgsStr db "Not enough	arguments$"
   1082	      75 67 68 20 61 72	67+
   1083	      75 6D 65 6E 74 73	24
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 20
prog.asm



   1084
   1085	      =004E		     FrameColorAttr  equ 4eh ; 01001110b
   1086
   1087
   1088				     end	     Start
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 21
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "00:22:16"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CHDELSE			  Near	 DGROUP:0369
@@CHDELSEIF			  Near	 DGROUP:035C
@@CHDENDIF			  Near	 DGROUP:036B
@@CHECKOK			  Near	 DGROUP:02DD
@@DEFINEDSTYLE			  Near	 DGROUP:03B4
@@DFLEWHILE			  Near	 DGROUP:022C
@@DFLEWHILECLAUSE		  Near	 DGROUP:0232
@@DFLWHILE			  Near	 DGROUP:0258
@@DFLWHILECLAUSE		  Near	 DGROUP:025E
@@DFWHILE			  Near	 DGROUP:01EC
@@DFWHILECLAUSE			  Near	 DGROUP:01FD
@@DSHWHILE			  Near	 DGROUP:02AD
@@DSHWHILECLAUSE		  Near	 DGROUP:02B5
@@DSVWHILE			  Near	 DGROUP:028B
@@DSVWHILECLAUSE		  Near	 DGROUP:0299
@@ELSE				  Near	 DGROUP:0197
@@ENDIF				  Near	 DGROUP:0199
@@ENDPRINT			  Near	 DGROUP:0459
@@ENDWHILE			  Near	 DGROUP:02EC
@@ERRNOTENOUGHARGS		  Near	 DGROUP:052E
@@FUNCEND			  Near	 DGROUP:038E
@@GETCOLOREND			  Near	 DGROUP:04B0
@@GETDECEND			  Near	 DGROUP:031D
@@GETHEXEND			  Near	 DGROUP:034E
@@GETSTYLEEND			  Near	 DGROUP:03CA
@@GETTEXTEND			  Near	 DGROUP:0433
@@ISFOUND			  Near	 DGROUP:013B
@@ISNOTFOUND			  Near	 DGROUP:013E
@@NOTEXT			  Near	 DGROUP:0423
@@PRINTCHAR			  Near	 DGROUP:0449
@@PRINTNOTEXT			  Near	 DGROUP:0496
@@PROGRAMEND			  Near	 DGROUP:0535
@@WHILE				  Near	 DGROUP:02DE
@@WRITESTYLE			  Near	 DGROUP:03C3
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGCADDR			  Number 0080
ARGVADDR			  Number 0081
CHECKARGC			  Near	 DGROUP:02CE
CONVERTHEXDIGIT			  Near	 DGROUP:034F
Turbo Assembler	 Version 4.1	    02/20/24 00:22:16	    Page 22
Symbol Table



DRAWFRAME			  Near	 DGROUP:01BB
DRAWFRAMEEMPTYLINE		  Near	 DGROUP:0217
DRAWFRAMELINE			  Near	 DGROUP:0237
DRAWSHADOW			  Near	 DGROUP:0274
ERRNOTENOUGHARGSSTR		  Byte	 DGROUP:0561
FRAMEBEGCOL			  Number 0014
FRAMEBEGLINE			  Number 0005
FRAMECOLORATTR			  Number 004E
GETCOLOR			  Near	 DGROUP:0498
GETDECIMALNUMBER		  Near	 DGROUP:02ED
GETHEXNUMBER			  Near	 DGROUP:031E
GETSTYLE			  Near	 DGROUP:0390
GETTEXT				  Near	 DGROUP:03CC
GETWIDTHHEIGHT			  Near	 DGROUP:036C
MAIN				  Near	 DGROUP:04B2
MAKECONSOLEBRIGHTAGAIN		  Near	 DGROUP:02BA
MCBAWHILE			  Near	 DGROUP:02BF
MCBAWHILEEND			  Near	 DGROUP:02CD
MODSYMBOL			  Near	 DGROUP:0435
MYMEMCHR			  Near	 DGROUP:011D
MYMEMCMP			  Near	 DGROUP:019E
MYMEMCPY			  Near	 DGROUP:0157
MYMEMMOVE			  Near	 DGROUP:016E
MYMEMSET			  Near	 DGROUP:0140
MYSTRLEN			  Near	 DGROUP:0103
NEWLINE				  Number 000D
PRINTLINE			  Near	 DGROUP:0449
PRINTTEXT			  Near	 DGROUP:045A
SCREENHEIGHT			  Number 001A
SCREENWIDTH			  Number 0050
SHADOWATTRMASK			  Number 0087
SKIPSPACES			  Near	 DGROUP:02DE
SPACE				  Number 0020
START				  Near	 DGROUP:0100
STYLES				  Byte	 DGROUP:053D

Macro Name

EOP

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0576 Word	  Public  CODE
