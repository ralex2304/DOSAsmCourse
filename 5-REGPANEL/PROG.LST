Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 1
prog.asm



      1				     .286
      2	0000			     .model tiny
      3	0000			     .code
      4				     org 100h
      5				     locals @@
      6
      7	0100  E9 05B0		     Start:	     jmp main
      8
      9	      =0050		     ScreenWidth     equ 80
     10	      =001A		     ScreenHeight    equ 26
     11
     12
     13	      =000D		     RegsNum	     equ 13  ; regs list config
     14	0103  61 78 62 78 63 78	64+  RegsNames	     db	"axbxcxdxsidibpspdsesssipcs"
     15	      78 73 69 64 69 62	70+
     16	      73 70 64 73 65 73	73+
     17	      73 69 70 63 73
     18
     19	      =001E		     HotKeyOpenKeycode	     equ 1eh ; A - keycode ;;;57h ; F11	keycode
     20	      =001F		     HotKeyCloseKeycode	     equ 1fh ; S - keycode ;;;58h ; F12	keycode
     21
     22	      =0002		     TimerPeriod     equ 2
     23
     24	      =0020		     Space	     equ ' '
     25
     26	      =0003		     FrameBegLine    equ 3
     27	      =0044		     FrameBegCol     equ 68
     28
     29	      =0011		     FrameHeight     equ RegsNum + 4
     30	      =000B		     FrameWidth	     equ 11
     31
     32	      =00BB		     FrameSize	     equ FrameHeight * FrameWidth
     33
     34				     ;--------------------------------------
     35				     ; Draws frame
     36				     ;
     37				     ; Assumes:	     es	= 0b800h
     38				     ; Destr:	     ax, bx, cx, dx, si, bp
     39				     ;--------------------------------------
     40	011D			     DrawFrame	     proc
     41
     42	011D  BD 03AEr				     mov bp, offset FrameStyle
     43	0120  B6 4E				     mov dh, 4eh ; color
     44	0122  BE 03C7r				     mov si, offset MemBuffer
     45
     46	0125  BB 0268				     mov bx, (FrameBegLine * ScreenWidth + FrameBegCol)	* 2
     47						     ; bx => x = 0; y =	0
     48
     49	0128  E8 006A				     call DrawFrameEmptyLine
     50	012B  81 C3 008A			     add bx, (ScreenWidth - FrameWidth)	* 2
     51
     52						     ; top line
     53	012F  E8 0086				     call DrawFrameLine
     54	0132  81 C3 008A			     add bx, (ScreenWidth - FrameWidth)	* 2
     55
     56
     57						     ; middle lines
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 2
prog.asm



     58	0136  83 C5 03				     add bp, 3
     59
     60	0139  B8 0820				     mov ax, (ScreenWidth * FrameHeight) * 2 - (4 * ScreenWidth) * 2
     61	013C  03 C3				     add ax, bx
     62
     63	013E  EB 0A 90				     jmp @@DFwhileClause
     64	0141			     @@DFwhile:
     65	0141  50				     push ax ; save ax
     66	0142  E8 0073				     call DrawFrameLine
     67	0145  81 C3 008A			     add bx, (ScreenWidth - FrameWidth)	* 2
     68
     69	0149  58				     pop ax ; restore ax
     70	014A			     @@DFwhileClause:
     71	014A  3B D8				     cmp bx, ax
     72	014C  72 F3				     jb	@@DFwhile
     73
     74						     ; bottom line
     75	014E  83 C5 03				     add bp, 3
     76
     77	0151  E8 0064				     call DrawFrameLine
     78	0154  81 C3 008A			     add bx, (ScreenWidth - FrameWidth)	* 2
     79
     80	0158  E8 003A				     call DrawFrameEmptyLine
     81
     82
     83						     ; print regs names
     84	015B  BD 03AC				     mov bp, (ScreenWidth * (FrameBegLine + 2) + (FrameBegCol +	2)) * 2
     85	015E  BE 056Dr				     mov si, offset MemBuffer +	FrameSize * 2 +	(FrameWidth * 2	+ 2) * 2
     86
     87	0161  BB 0000				     mov bx, 0
     88	0164  EB 29 90				     jmp @@DFforClause
     89	0167			     @@DFforBegin:
     90	0167  2E: 8A 8F	0103r			     mov cl, cs:[offset	RegsNames + bx]
     91	016C  26: 88 4E	00			     mov byte ptr es:[bp], cl
     92	0170  2E: 88 0C				     mov byte ptr cs:[si], cl
     93	0173  83 C5 02				     add bp, 2
     94	0176  83 C6 02				     add si, 2
     95
     96	0179  2E: 8A 8F	0104r			     mov cl, cs:[offset	RegsNames + bx + 1]
     97	017E  26: 88 4E	00			     mov byte ptr es:[bp], cl
     98	0182  2E: 88 0C				     mov byte ptr cs:[si], cl
     99
    100	0185  81 C5 009E			     add bp, (ScreenWidth - 1) * 2
    101	0189  83 C6 14				     add si, (FrameWidth - 2 + 1) * 2
    102
    103	018C  83 C3 02				     add bx, 2
    104	018F			     @@DFforClause:
    105	018F  83 FB 1A				     cmp bx, RegsNum * 2
    106	0192  72 D3				     jb	@@DFforBegin
    107
    108	0194  C3				     ret
    109	0195					     endp
    110				     ;---------------------------------------
    111
    112				     ;--------------------------------------
    113				     ; Writes one symbol to videomem and supports all buffers
    114				     ;
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 3
prog.asm



    115				     ; Entry:	     bp	= style	str addr
    116				     ;		     bx	= line beginning symbol	addr
    117				     ;		     si	= position in mem buf
    118				     ;		     dh	= color
    119				     ;		     dl	= symbol
    120				     ;
    121				     ; Assumes:	     es	= 0b800h
    122				     ;		     ds	allows to reach	style_str
    123				     ;
    124				     ; Destr:	     cx
    125				     ; Return:	     bx	= the next symbol
    126				     ;		     si	= the next symbol
    127				     ;--------------------------------------
    128				     WriteSymbol     macro
    129
    130						     mov cx, es:[bx]
    131						     mov cs:[si], cx
    132						     mov es:[bx], dx
    133						     mov cs:[si	+ FrameSize * 2], dx
    134						     add bx, 2
    135						     add si, 2
    136
    137						     endm
    138				     ;--------------------------------------
    139
    140				     ;--------------------------------------
    141				     ; Draws one empty line of frame
    142				     ; DrawFrameEmptyLine
    143				     ; Entry:	     bx	= line beginning symbol	addr
    144				     ;		     si	= position in mem buf
    145				     ;		     dh	= color
    146				     ;
    147				     ; Assumes:	     es	= 0b800h
    148				     ;
    149				     ; Destr:	     ax, cx, dl
    150				     ; Return:	     bx	= symbol after the last	symbol in the line
    151				     ;		     si	= symbol after the last	symbol in mem buf
    152				     ;--------------------------------------
    153
    154	0195			     DrawFrameEmptyLine	     proc
    155
    156	0195  B2 20				     mov dl, Space
    157
    158	0197  B8 0016				     mov ax, FrameWidth	* 2
    159	019A  03 C3				     add ax, bx
    160
    161	019C  EB 15 90				     jmp @@DFLEwhileClause
    162	019F			     @@DFLEwhile:
    163						     WriteSymbol
1   164
1   165	019F  26: 8B 0F				     mov cx, es:[bx]
1   166	01A2  2E: 89 0C				     mov cs:[si], cx
1   167	01A5  26: 89 17				     mov es:[bx], dx
1   168	01A8  2E: 89 94	0176			     mov cs:[si	+ FrameSize * 2], dx
1   169	01AD  83 C3 02				     add bx, 2
1   170	01B0  83 C6 02				     add si, 2
1   171
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 4
prog.asm



    172	01B3			     @@DFLEwhileClause:
    173	01B3  3B D8				     cmp bx, ax
    174	01B5  72 E8				     jb	@@DFLEwhile
    175
    176	01B7  C3				     ret
    177	01B8					     endp
    178				     ;--------------------------------------
    179
    180				     ;--------------------------------------
    181				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    182				     ; DrawDrameLine
    183				     ; Entry:	     bp	= style	str addr
    184				     ;		     bx	= line beginning symbol	addr
    185				     ;		     si	= position in mem buf
    186				     ;		     dh	= color
    187				     ;
    188				     ; Assumes:	     es	= 0b800h
    189				     ;		     ds	allows to reach	style_str
    190				     ;
    191				     ; Destr:	     ax, cx, dl
    192				     ; Return:	     bx	= symbol after the last	symbol in the line
    193				     ;		     si	= symbol after the last	symbol in mem buf
    194				     ;--------------------------------------
    195
    196	01B8			     DrawFrameLine   proc
    197
    198						     ; write empty symbol
    199	01B8  B2 20				     mov dl, Space
    200						     WriteSymbol
1   201
1   202	01BA  26: 8B 0F				     mov cx, es:[bx]
1   203	01BD  2E: 89 0C				     mov cs:[si], cx
1   204	01C0  26: 89 17				     mov es:[bx], dx
1   205	01C3  2E: 89 94	0176			     mov cs:[si	+ FrameSize * 2], dx
1   206	01C8  83 C3 02				     add bx, 2
1   207	01CB  83 C6 02				     add si, 2
1   208
    209
    210						     ; write left symbol
    211	01CE  2E: 8A 56	00			     mov dl, cs:[bp]
    212						     WriteSymbol
1   213
1   214	01D2  26: 8B 0F				     mov cx, es:[bx]
1   215	01D5  2E: 89 0C				     mov cs:[si], cx
1   216	01D8  26: 89 17				     mov es:[bx], dx
1   217	01DB  2E: 89 94	0176			     mov cs:[si	+ FrameSize * 2], dx
1   218	01E0  83 C3 02				     add bx, 2
1   219	01E3  83 C6 02				     add si, 2
1   220
    221
    222	01E6  2E: 8A 56	01			     mov dl, cs:[bp + 1]
    223
    224	01EA  B8 000E				     mov ax, (FrameWidth - 2 * 2) * 2
    225	01ED  03 C3				     add ax, bx
    226
    227	01EF  EB 15 90				     jmp @@DFLwhileClause
    228	01F2			     @@DFLwhile:
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 5
prog.asm



    229						     WriteSymbol
1   230
1   231	01F2  26: 8B 0F				     mov cx, es:[bx]
1   232	01F5  2E: 89 0C				     mov cs:[si], cx
1   233	01F8  26: 89 17				     mov es:[bx], dx
1   234	01FB  2E: 89 94	0176			     mov cs:[si	+ FrameSize * 2], dx
1   235	0200  83 C3 02				     add bx, 2
1   236	0203  83 C6 02				     add si, 2
1   237
    238	0206			     @@DFLwhileClause:
    239	0206  3B D8				     cmp bx, ax
    240	0208  72 E8				     jb	@@DFLwhile
    241
    242						     ; write right symbol
    243	020A  2E: 8A 56	02			     mov dl, cs:[bp + 2]
    244						     WriteSymbol
1   245
1   246	020E  26: 8B 0F				     mov cx, es:[bx]
1   247	0211  2E: 89 0C				     mov cs:[si], cx
1   248	0214  26: 89 17				     mov es:[bx], dx
1   249	0217  2E: 89 94	0176			     mov cs:[si	+ FrameSize * 2], dx
1   250	021C  83 C3 02				     add bx, 2
1   251	021F  83 C6 02				     add si, 2
1   252
    253
    254						     ; write empty symbol
    255	0222  B2 20				     mov dl, Space
    256						     WriteSymbol
1   257
1   258	0224  26: 8B 0F				     mov cx, es:[bx]
1   259	0227  2E: 89 0C				     mov cs:[si], cx
1   260	022A  26: 89 17				     mov es:[bx], dx
1   261	022D  2E: 89 94	0176			     mov cs:[si	+ FrameSize * 2], dx
1   262	0232  83 C3 02				     add bx, 2
1   263	0235  83 C6 02				     add si, 2
1   264
    265
    266	0238  C3				     ret
    267	0239					     endp
    268				     ;--------------------------------------
    269
    270				     ;--------------------------------------
    271				     ; Restores	data from buf to videomem
    272				     ;
    273				     ; Assumes:	     es	= 0b800h
    274				     ; Destr:	     ax, bx, cx, dx, si
    275				     ;--------------------------------------
    276	0239			     RestoreFromBuf  proc
    277
    278	0239  BE 03C7r				     mov si, offset MemBuffer
    279
    280	023C  BB 0268				     mov bx, (FrameBegLine * ScreenWidth + FrameBegCol)	* 2
    281
    282	023F  B8 0011				     mov ax, FrameHeight
    283	0242  EB 1E 90				     jmp @@RFBforLinesClause
    284	0245			     @@RFBforLinesBegin:
    285
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 6
prog.asm



    286	0245  B9 000B				     mov cx, FrameWidth
    287	0248  EB 0E 90				     jmp @@RFBforColsClause
    288	024B			     @@RFBforColsBegin:
    289
    290	024B  2E: 8B 14				     mov dx, cs:[si]
    291	024E  26: 89 17				     mov es:[bx], dx
    292
    293	0251  83 C3 02				     add bx, 2
    294	0254  83 C6 02				     add si, 2
    295
    296	0257  49				     dec cx
    297	0258			     @@RFBforColsClause:
    298	0258  83 F9 00				     cmp cx, 0
    299	025B  77 EE				     ja	@@RFBforColsBegin
    300
    301	025D  81 C3 008A			     add bx, (ScreenWidth - FrameWidth)	* 2
    302
    303	0261  48				     dec ax
    304	0262			     @@RFBforLinesClause:
    305	0262  3D 0000				     cmp ax, 0
    306	0265  77 DE				     ja	@@RFBforLinesBegin
    307
    308	0267  C3				     ret
    309	0268					     endp
    310				     ;---------------------------------------
    311
    312				     ;--------------------------------------
    313				     ; Check if	something has changed frame
    314				     ;
    315				     ; Assumes:	     es	= 0b800h
    316				     ; Destr:	     ax, bx, cx, dx, si
    317				     ;--------------------------------------
    318	0268			     CheckIfChanged  proc
    319
    320	0268  BE 03C7r				     mov si, offset MemBuffer
    321
    322	026B  BB 0268				     mov bx, (FrameBegLine * ScreenWidth + FrameBegCol)	* 2
    323
    324	026E  B8 0011				     mov ax, FrameHeight
    325	0271  EB 2D 90				     jmp @@CICforLinesClause
    326	0274			     @@CICforLinesBegin:
    327
    328	0274  B9 000B				     mov cx, FrameWidth
    329	0277  EB 1D 90				     jmp @@CICforColsClause
    330	027A			     @@CICforColsBegin:
    331
    332	027A  26: 8B 17				     mov dx, es:[bx]
    333	027D  2E: 39 94	0176			     cmp cs:[FrameSize * 2 + si], dx
    334	0282  74 0B				     je	@@CICnothingChanged
    335
    336	0284  2E: 89 14				     mov cs:[si], dx
    337	0287  2E: 8B 94	0176			     mov dx, cs:[FrameSize * 2 + si]
    338	028C  26: 89 17				     mov es:[bx], dx
    339
    340	028F			     @@CICnothingChanged:
    341	028F  83 C3 02				     add bx, 2
    342	0292  83 C6 02				     add si, 2
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 7
prog.asm



    343
    344	0295  49				     dec cx
    345	0296			     @@CICforColsClause:
    346	0296  83 F9 00				     cmp cx, 0
    347	0299  77 DF				     ja	@@CICforColsBegin
    348
    349	029B  81 C3 008A			     add bx, (ScreenWidth - FrameWidth)	* 2
    350
    351	029F  48				     dec ax
    352	02A0			     @@CICforLinesClause:
    353	02A0  3D 0000				     cmp ax, 0
    354	02A3  77 CF				     ja	@@CICforLinesBegin
    355
    356	02A5  C3				     ret
    357	02A6					     endp
    358				     ;---------------------------------------
    359
    360				     ;--------------------------------------
    361				     ; Converts	2 bytes	to text	hex and	writes to es:[bp] and cs:[si]
    362				     ;
    363				     ; Entry:	     ax	- hex data
    364				     ;		     es:[bp] - dest address
    365				     ;		     cs:[si] - dest address
    366				     ;
    367				     ; Destr:	     ax, bx, cx
    368				     ; Return:	     bp	= symbol after the last	symbol
    369				     ;		     si	= symbol after the last	symbol in mem buf
    370				     ;--------------------------------------
    371	02A6			     ConvertAndWriteHex	     proc
    372
    373						     ; ax - data
    374	02A6  B9 0004				     mov cx, 4
    375	02A9			     @@ConvertHexLoop:
    376	02A9  8B D8				     mov bx, ax
    377	02AB  C1 EB 0C				     shr bx, 12
    378	02AE  2E: 8A 9F	03B7r			     mov bl, cs:[offset	HexTable + bx]
    379
    380	02B3  26: 88 5E	00			     mov byte ptr es:[bp], bl
    381	02B7  2E: 88 1C				     mov byte ptr cs:[si], bl
    382	02BA  83 C5 02				     add bp, 2
    383	02BD  83 C6 02				     add si, 2
    384
    385	02C0  C1 E0 04				     shl ax, 4
    386	02C3  E2 E4				     loop @@ConvertHexLoop
    387
    388	02C5  C3				     ret
    389	02C6					     endp
    390				     ;--------------------------------------
    391
    392				     ;--------------------------------------
    393				     ; Prints regs values in column
    394				     ;
    395				     ; Entry:	     ss:[sp] - first reg value.	ss:[sp + n] - the next registers values
    396				     ;		     es:[bp] - dest address
    397				     ;		     cs:[si] - dest address
    398				     ;
    399				     ; Destr:	     ax, bx, cx, di
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 8
prog.asm



    400				     ;--------------------------------------
    401	02C6			     WriteRegsValues proc
    402
    403	02C6  BF 0002				     mov di, 2 ; skip ret addr
    404	02C9  EB 15 90				     jmp @@WRVforClause
    405
    406	02CC  8B DC		     @@WRVforBegin:  mov bx, sp
    407	02CE  03 DF				     add bx, di
    408	02D0  36: 8B 07				     mov ax, ss:[bx]
    409
    410	02D3  E8 FFD0				     call ConvertAndWriteHex
    411
    412	02D6  81 C5 0098			     add bp, (ScreenWidth - 1 -	3) * 2
    413	02DA  83 C6 0E				     add si, (FrameWidth - 1 - 4 + 1) *	2
    414
    415	02DD  83 C7 02				     add di, 2
    416	02E0			     @@WRVforClause:
    417	02E0  83 FF 1C				     cmp di, RegsNum * 2 + 2
    418	02E3  72 E7				     jb	@@WRVforBegin
    419
    420	02E5  C3				     ret
    421	02E6					     endp
    422				     ;--------------------------------------
    423
    424				     ;======================================
    425	02E6			     IntOverride08   proc
    426
    427	02E6  2E: 80 3E	03ADr 00		     cmp cs:PopupCnt, 0
    428	02EC  74 49				     je	@@IO08noneLong
    429
    430	02EE  16 06 1E 54 55 57	56+		     push ss es	ds sp bp di si dx cx bx	ax
    431	      52 51 53 50
    432
    433	02F9  2E: 80 3E	03ADr 01		     cmp cs:PopupCnt, 1
    434	02FF  75 07				     jne @@IO08isAlreadyInit
    435
    436	0301  68 B800				     push 0b800h
    437	0304  07				     pop es
    438
    439	0305  E8 FE15				     call DrawFrame
    440
    441	0308			     @@IO08isAlreadyInit:
    442	0308  2E: FE 06	03ADr			     inc cs:PopupCnt
    443	030D  2E: 80 3E	03ADr 02		     cmp cs:PopupCnt, TimerPeriod
    444	0313  72 17				     jb	@@IO08nonePopLong
    445
    446	0315  2E: C6 06	03ADr 02  +		     mov cs:PopupCnt, 2
    447	      90
    448
    449	031C  68 B800				     push 0b800h
    450	031F  07				     pop es
    451
    452	0320  E8 FF45				     call CheckIfChanged
    453
    454						     ; printing	regs values
    455	0323  BD 03B2				     mov bp, (ScreenWidth * (FrameBegLine + 2) + (FrameBegCol +	2) + 3)	* 2
    456	0326  BE 0573r				     mov si, offset MemBuffer +	FrameSize * 2 +	(FrameWidth * 2	+ 5) * 2
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 9
prog.asm



    457
    458	0329  EB 0F 90				     jmp @@IO08writeRegs
    459
    460	032C			     @@IO08nonePopLong:
    461	032C  58 5B 59 5A 5E 5F	5D+		     pop ax bx cx dx si	di bp sp ds es ss
    462	      5C 1F 07 17
    463
    464	0337  EB 0F 90		     @@IO08noneLong: jmp @@IO08none ; long jump
    465
    466	033A			     @@IO08writeRegs:
    467	033A  E8 FF89				     call WriteRegsValues
    468
    469	033D  58 5B 59 5A 5E 5F	5D+		     pop ax bx cx dx si	di bp sp ds es ss
    470	      5C 1F 07 17
    471	0348			     @@IO08none:
    472	0348  EA				     db	0eah ; far jmp
    473	0349  0000		     Old08Offs	     dw	0
    474	034B  0000		     Old08Seg	     dw	0
    475
    476	034D					     endp
    477				     ;======================================
    478
    479				     ;======================================
    480	034D			     IntOverride09   proc
    481
    482	034D  50				     push ax
    483
    484	034E  E4 60				     in	al, 60h
    485	0350  3C 1E				     cmp al, HotKeyOpenKeycode
    486	0352  75 12				     jne @@IO09elseif
    487
    488	0354  2E: 80 3E	03ADr 00		     cmp cs:PopupCnt, 0
    489	035A  75 41				     jne @@IO09isHotKey
    490
    491						     ; enable frame and	draw it
    492	035C  2E: C6 06	03ADr 01  +		     mov cs:PopupCnt, 1
    493	      90
    494
    495	0363  EB 38 90				     jmp @@IO09isHotKey
    496
    497	0366  3C 1F		     @@IO09elseif:   cmp al, HotKeyCloseKeycode
    498	0368  75 23				     jne @@IO09notHotKey
    499
    500	036A  2E: 80 3E	03ADr 00		     cmp cs:PopupCnt, 0
    501	0370  74 2B				     je	@@IO09isHotKey
    502
    503	0372  2E: C6 06	03ADr 00  +		     mov cs:PopupCnt, 0
    504	      90
    505
    506	0379  53 51 52 06 56			     push bx cx	dx es si
    507	037E  68 B800				     push 0b800h
    508	0381  07				     pop es
    509	0382  E8 FEB4				     call RestoreFromBuf
    510	0385  5E 07 5A 59 5B			     pop si es dx cx bx
    511
    512	038A  EB 11 90				     jmp @@IO09isHotKey
    513
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 10
prog.asm



    514	038D			     @@IO09notHotKey:
    515
    516	038D  24 7F				     and al, 01111111b
    517	038F  3C 1E				     cmp al, HotKeyOpenKeycode
    518	0391  74 0A				     je	@@IO09isHotKey
    519
    520	0393  3C 1F				     cmp al, HotKeyCloseKeycode
    521	0395  74 06				     je	@@IO09isHotKey
    522
    523	0397  58				     pop ax
    524
    525	0398  EA				     db	0eah ; far jmp
    526	0399  0000		     Old09Offs	     dw	0
    527	039B  0000		     Old09Seg	     dw	0
    528
    529	039D			     @@IO09isHotKey:
    530	039D  E4 61				     in	al, 61h
    531	039F  0C 80				     or	al, 80h
    532	03A1  E6 61				     out 61h, al
    533	03A3  24 7F				     and al, not 80h
    534	03A5  E6 61				     out 61h, al
    535
    536	03A7  B0 20				     mov al, 20h ; send	EOI to interrupt ctrl
    537	03A9  E6 20				     out 20h, al
    538
    539	03AB  58				     pop ax
    540	03AC  CF				     iret
    541	03AD					     endp
    542				     ;======================================
    543
    544
    545	03AD  00		     PopupCnt	     db	0 ; 0 -	off; 1 - on; >=	2 - on and has already been drawn
    546
    547	03AE  DA C4 BF B3 20 B3	C0+  FrameStyle	     db	0dah, 0c4h, 0bfh, 0b3h,	Space, 0b3h, 0c0h, 0c4h, 0d9h ;	single frame
    548	      C4 D9
    549
    550	03B7  30 31 32 33 34 35	36+  HexTable	     db	"0123456789ABCDEF"
    551	      37 38 39 41 42 43	44+
    552	      45 46
    553
    554	03C7  0176*(0000)	     MemBuffer	     dw	(FrameWidth * FrameHeight * 2) dup(0) ;	first  half - old values
    555											      ;	second half - actual
    556
    557	06B3			     EndOfProg:
    558
    559	06B3			     main:	     ; timer - IRQ0
    560	06B3  B8 3508				     mov ax, 3508h
    561	06B6  CD 21				     int 21h	     ; get int vector addr in es:bx
    562
    563	06B8  89 1E 0349r			     mov Old08Offs, bx
    564	06BC  8C C3				     mov bx, es
    565	06BE  89 1E 034Br			     mov Old08Seg, bx
    566
    567	06C2  1E				     push ds ; save ds
    568	06C3  BA 02E6r				     mov dx, offset IntOverride08
    569	06C6  0E				     push cs
    570	06C7  1F				     pop ds
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 11
prog.asm



    571	06C8  B8 2508				     mov ax, 2508h
    572	06CB  CD 21				     int 21h	     ; set int vector addr from	ds: dx
    573	06CD  1F				     pop ds ; restore ds
    574
    575						     ; keybord - IRQ1
    576	06CE  B8 3509				     mov ax, 3509h
    577	06D1  CD 21				     int 21h	     ; get int vector addr in es:bx
    578
    579	06D3  89 1E 0399r			     mov Old09Offs, bx
    580	06D7  8C C3				     mov bx, es
    581	06D9  89 1E 039Br			     mov Old09Seg, bx
    582
    583	06DD  1E				     push ds ; save ds
    584	06DE  BA 034Dr				     mov dx, offset IntOverride09
    585	06E1  0E				     push cs
    586	06E2  1F				     pop ds
    587	06E3  B8 2509				     mov ax, 2509h
    588	06E6  CD 21				     int 21h	     ; set int vector addr from	ds: dx
    589	06E8  1F				     pop ds ; restore ds
    590
    591						     ; stay resident
    592	06E9  BA 06B3r				     mov dx, offset EndOfProg
    593	06EC  C1 EA 04				     shr dx, 4
    594	06EF  42				     inc dx	     ; sizeof(prog) / 16 + 1
    595	06F0  B8 3100				     mov ax, 3100h
    596	06F3  CD 21				     int 21h
    597
    598				     end	     Start
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 12
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/26/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "20:09:06"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CICFORCOLSBEGIN		  Near	 DGROUP:027A
@@CICFORCOLSCLAUSE		  Near	 DGROUP:0296
@@CICFORLINESBEGIN		  Near	 DGROUP:0274
@@CICFORLINESCLAUSE		  Near	 DGROUP:02A0
@@CICNOTHINGCHANGED		  Near	 DGROUP:028F
@@CONVERTHEXLOOP		  Near	 DGROUP:02A9
@@DFFORBEGIN			  Near	 DGROUP:0167
@@DFFORCLAUSE			  Near	 DGROUP:018F
@@DFLEWHILE			  Near	 DGROUP:019F
@@DFLEWHILECLAUSE		  Near	 DGROUP:01B3
@@DFLWHILE			  Near	 DGROUP:01F2
@@DFLWHILECLAUSE		  Near	 DGROUP:0206
@@DFWHILE			  Near	 DGROUP:0141
@@DFWHILECLAUSE			  Near	 DGROUP:014A
@@IO08ISALREADYINIT		  Near	 DGROUP:0308
@@IO08NONE			  Near	 DGROUP:0348
@@IO08NONELONG			  Near	 DGROUP:0337
@@IO08NONEPOPLONG		  Near	 DGROUP:032C
@@IO08WRITEREGS			  Near	 DGROUP:033A
@@IO09ELSEIF			  Near	 DGROUP:0366
@@IO09ISHOTKEY			  Near	 DGROUP:039D
@@IO09NOTHOTKEY			  Near	 DGROUP:038D
@@RFBFORCOLSBEGIN		  Near	 DGROUP:024B
@@RFBFORCOLSCLAUSE		  Near	 DGROUP:0258
@@RFBFORLINESBEGIN		  Near	 DGROUP:0245
@@RFBFORLINESCLAUSE		  Near	 DGROUP:0262
@@WRVFORBEGIN			  Near	 DGROUP:02CC
@@WRVFORCLAUSE			  Near	 DGROUP:02E0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CHECKIFCHANGED			  Near	 DGROUP:0268
CONVERTANDWRITEHEX		  Near	 DGROUP:02A6
DRAWFRAME			  Near	 DGROUP:011D
DRAWFRAMEEMPTYLINE		  Near	 DGROUP:0195
DRAWFRAMELINE			  Near	 DGROUP:01B8
ENDOFPROG			  Near	 DGROUP:06B3
FRAMEBEGCOL			  Number 0044
FRAMEBEGLINE			  Number 0003
FRAMEHEIGHT			  Number 0011
FRAMESIZE			  Number 00BB
Turbo Assembler	 Version 4.1	    02/26/24 20:09:06	    Page 13
Symbol Table



FRAMESTYLE			  Byte	 DGROUP:03AE
FRAMEWIDTH			  Number 000B
HEXTABLE			  Byte	 DGROUP:03B7
HOTKEYCLOSEKEYCODE		  Number 001F
HOTKEYOPENKEYCODE		  Number 001E
INTOVERRIDE08			  Near	 DGROUP:02E6
INTOVERRIDE09			  Near	 DGROUP:034D
MAIN				  Near	 DGROUP:06B3
MEMBUFFER			  Word	 DGROUP:03C7
OLD08OFFS			  Word	 DGROUP:0349
OLD08SEG			  Word	 DGROUP:034B
OLD09OFFS			  Word	 DGROUP:0399
OLD09SEG			  Word	 DGROUP:039B
POPUPCNT			  Byte	 DGROUP:03AD
REGSNAMES			  Byte	 DGROUP:0103
REGSNUM				  Number 000D
RESTOREFROMBUF			  Near	 DGROUP:0239
SCREENHEIGHT			  Number 001A
SCREENWIDTH			  Number 0050
SPACE				  Number 0020
START				  Near	 DGROUP:0100
TIMERPERIOD			  Number 0002
WRITEREGSVALUES			  Near	 DGROUP:02C6

Macro Name

WRITESYMBOL

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  06F5 Word	  Public  CODE
