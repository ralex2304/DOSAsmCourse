Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 1
prog.asm



      1				     .286
      2	0000			     .model tiny
      3	0000			     .code
      4				     org 100h
      5				     locals @@
      6
      7	0100  E9 00C6		     Start:	     jmp main
      8
      9	      =0050		     ScreenWidth     equ 80
     10	      =001A		     ScreenHeight    equ 26
     11
     12	      =0005		     RegsNum	     equ 5
     13
     14	0103  61 78 62 78 63 78	64+  RegsNames	     db	"axbxcxdxsp"
     15	      78 73 70
     16	      =	sp dx cx bx ax	     RegsPush	     equ sp dx cx bx ax
     17
     18	      =0058		     F12pushKeycode	     equ 58h
     19	      =00D8		     F12releaseKeycode	     equ F12pushKeycode	+ 128
     20
     21				     HotKeyOpenKeycode	     equ F12pushKeycode
     22				     HotKeyCloseKeycode	     equ F12releaseKeycode
     23
     24	      =0020		     Space	     equ ' '
     25
     26	      =0008		     FrameBegLine    equ 8
     27	      =0043		     FrameBegCol     equ 67
     28
     29	      =0009		     FrameHeight     equ RegsNum + 4
     30	      =000C		     FrameWidth	     equ 12
     31
     32				     ;--------------------------------------
     33				     ; Draws frame
     34				     ; Entry:	     bp	= style	str addr
     35				     ;		     cl	= width
     36				     ;		     ch	= height
     37				     ;		     dh	= color
     38				     ;
     39				     ; Assumes:	     es	= 0b800h
     40				     ; Destr:	     ax, bx, dl
     41				     ;--------------------------------------
     42	010D			     DrawFrame	     proc
     43
     44	010D  BB 0586				     mov bx, (FrameBegLine * ScreenWidth + FrameBegCol)	* 2
     45						     ; bx => x = 0; y =	0
     46
     47	0110  E8 0056				     call DrawFrameEmptyLine
     48	0113  81 C3 00A0			     add bx, ScreenWidth * 2
     49	0117  32 E4				     xor ah, ah
     50	0119  8A C1				     mov al, cl
     51	011B  D1 E0				     shl ax, 1	; ax = width * 2
     52	011D  2B D8				     sub bx, ax	; bx =>	x = 0; y = 1
     53
     54						     ; top line
     55	011F  E8 0067				     call DrawFrameLine
     56	0122  81 C3 00A0			     add bx, ScreenWidth * 2
     57	0126  32 E4				     xor ah, ah
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 2
prog.asm



     58	0128  8A C1				     mov al, cl
     59	012A  D1 E0				     shl ax, 1	; ax = width * 2
     60	012C  2B D8				     sub bx, ax	; bx =>	x = 0; y = 2
     61
     62						     ; middle lines
     63	012E  83 C5 03				     add bp, 3
     64
     65	0131  B8 00A0				     mov ax, ScreenWidth * 2
     66	0134  F6 E5				     mul ch
     67	0136  2D 0280				     sub ax, (4	* ScreenWidth) * 2
     68	0139  03 C3				     add ax, bx
     69
     70	013B  EB 12 90				     jmp @@DFwhileClause
     71	013E			     @@DFwhile:
     72	013E  50				     push ax ; save ax
     73	013F  E8 0047				     call DrawFrameLine
     74	0142  81 C3 00A0			     add bx, ScreenWidth * 2
     75	0146  32 E4				     xor ah, ah
     76	0148  8A C1				     mov al, cl
     77	014A  D1 E0				     shl ax, 1
     78	014C  2B D8				     sub bx, ax
     79
     80	014E  58				     pop ax ; restore ax
     81	014F			     @@DFwhileClause:
     82	014F  3B D8				     cmp bx, ax
     83	0151  72 EB				     jb	@@DFwhile
     84
     85						     ; bottom line
     86	0153  83 C5 03				     add bp, 3
     87
     88	0156  E8 0030				     call DrawFrameLine
     89	0159  81 C3 00A0			     add bx, ScreenWidth * 2
     90	015D  32 E4				     xor ah, ah
     91	015F  8A C1				     mov al, cl
     92	0161  D1 E0				     shl ax, 1
     93	0163  2B D8				     sub bx, ax
     94
     95	0165  E8 0001				     call DrawFrameEmptyLine
     96
     97	0168  C3				     ret
     98	0169					     endp
     99				     ;---------------------------------------
    100
    101				     ;--------------------------------------
    102				     ; Draws one empty line of frame
    103				     ; DrawFrameEmptyLine
    104				     ; Entry:	     bx	= line beginning symbol	addr
    105				     ;		     cl	= width
    106				     ;		     ch	= height
    107				     ;		     dh	= color
    108				     ;
    109				     ; Assumes:	     es	= 0b800h
    110				     ;
    111				     ; Destr:	     ax, dl
    112				     ; Return:	     bx	= symbol after the last	symbol in the line
    113				     ;-------------------------------------
    114
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 3
prog.asm



    115	0169			     DrawFrameEmptyLine	     proc
    116
    117	0169  B2 20				     mov dl, Space
    118
    119	016B  26: 89 17				     mov es:[bx], dx
    120	016E  83 C3 02				     add bx, 2
    121
    122	0171  33 C0				     xor ax, ax
    123	0173  8A C1				     mov al, cl
    124	0175  2C 01				     sub al, 1
    125	0177  D1 E0				     shl ax, 1
    126	0179  03 C3				     add ax, bx
    127
    128	017B  EB 07 90				     jmp @@DFLEwhileClause
    129	017E			     @@DFLEwhile:
    130	017E  26: 89 17				     mov es:[bx], dx
    131	0181  83 C3 02				     add bx, 2
    132
    133	0184			     @@DFLEwhileClause:
    134	0184  3B D8				     cmp bx, ax
    135	0186  72 F6				     jb	@@DFLEwhile
    136
    137	0188  C3				     ret
    138	0189					     endp
    139				     ;--------------------------------------
    140
    141				     ;--------------------------------------
    142				     ; Draws one line of fram (1 symbol	+ n symbols + 1	symbol)
    143				     ; DrawDrameLine
    144				     ; Entry:	     bp	= style	str addr
    145				     ;		     bx	= line beginning symbol	addr
    146				     ;		     cl	= width
    147				     ;		     ch	= height
    148				     ;		     dh	= color
    149				     ;
    150				     ; Assumes:	     es	= 0b800h
    151				     ;		     ds	allows to reach	style_str
    152				     ;
    153				     ; Destr:	     ax, dl
    154				     ; Return:	     bx	= symbol after the last	symbol in the line
    155				     ;-------------------------------------
    156
    157	0189			     DrawFrameLine   proc
    158
    159						     ; write empty symbol
    160	0189  B2 20				     mov dl, Space
    161	018B  26: 89 17				     mov es:[bx], dx
    162	018E  83 C3 02				     add bx, 2
    163
    164						     ; write left symbol
    165	0191  2E: 8A 56	00			     mov dl, cs:[bp]
    166	0195  26: 89 17				     mov es:[bx], dx
    167	0198  83 C3 02				     add bx, 2
    168
    169	019B  2E: 8A 56	01			     mov dl, cs:[bp + 1]
    170
    171
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 4
prog.asm



    172	019F  33 C0				     xor ax, ax
    173	01A1  8A C1				     mov al, cl
    174	01A3  2C 04				     sub al, 2 * 2
    175	01A5  D1 E0				     shl ax, 1
    176	01A7  03 C3				     add ax, bx
    177
    178	01A9  EB 07 90				     jmp @@DFLwhileClause
    179	01AC			     @@DFLwhile:
    180	01AC  26: 89 17				     mov es:[bx], dx
    181	01AF  83 C3 02				     add bx, 2
    182
    183	01B2			     @@DFLwhileClause:
    184	01B2  3B D8				     cmp bx, ax
    185	01B4  72 F6				     jb	@@DFLwhile
    186
    187						     ; write right symbol
    188	01B6  2E: 8A 56	02			     mov dl, cs:[bp + 2]
    189	01BA  26: 89 17				     mov es:[bx], dx
    190	01BD  83 C3 02				     add bx, 2
    191
    192						     ; write empty symbol
    193	01C0  B2 20				     mov dl, Space
    194	01C2  26: 89 17				     mov es:[bx], dx
    195	01C5  83 C3 02				     add bx, 2
    196
    197	01C8  C3				     ret
    198	01C9					     endp
    199				     ;--------------------------------------
    200
    201	01C9			     main:	     ; timer - IRQ0
    202	01C9  B8 3508				     mov ax, 3508h
    203	01CC  CD 21				     int 21h	     ; get int vector addr in es:bx
    204
    205	01CE  89 1E 02A5r			     mov Old08Offs, bx
    206	01D2  8C C3				     mov bx, es
    207	01D4  89 1E 02A7r			     mov Old08Seg, bx
    208
    209	01D8  1E				     push ds ; save ds
    210	01D9  BA 020Br				     mov dx, offset IntOverride08
    211	01DC  0E				     push cs
    212	01DD  1F				     pop ds
    213	01DE  B8 2508				     mov ax, 2508h
    214	01E1  CD 21				     int 21h	     ; set int vector addr from	ds: dx
    215	01E3  1F				     pop ds ; restore ds
    216
    217						     ; keybord - IRQ1
    218	01E4  B8 3509				     mov ax, 3509h
    219	01E7  CD 21				     int 21h	     ; get int vector addr in es:bx
    220
    221	01E9  89 1E 0313r			     mov Old09Offs, bx
    222	01ED  8C C3				     mov bx, es
    223	01EF  89 1E 0315r			     mov Old09Seg, bx
    224
    225	01F3  1E				     push ds ; save ds
    226	01F4  BA 02A9r				     mov dx, offset IntOverride09
    227	01F7  0E				     push cs
    228	01F8  1F				     pop ds
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 5
prog.asm



    229	01F9  B8 2509				     mov ax, 2509h
    230	01FC  CD 21				     int 21h	     ; set int vector addr from	ds: dx
    231	01FE  1F				     pop ds ; restore ds
    232
    233						     ; stay resident
    234	01FF  BA 0331r				     mov dx, offset EndOfProg
    235	0202  C1 EA 04				     shr dx, 4
    236	0205  42				     inc dx	     ; sizeof(prog) / 16 + 1
    237	0206  B8 3100				     mov ax, 3100h
    238	0209  CD 21				     int 21h
    239
    240	020B			     IntOverride08   proc
    241
    242	020B  2E: 80 3E	0317r 00		     cmp cs:PopupCnt, 0
    243	0211  74 2C				     je	@@IO08noneLong
    244
    245	0213  2E: FE 06	0317r			     inc cs:PopupCnt
    246	0218  2E: 80 3E	0317r 05		     cmp cs:PopupCnt, 5
    247	021E  72 1F				     jb	@@IO08noneLong
    248
    249	0220  2E: C6 06	0317r 01  +		     mov cs:PopupCnt, 1
    250	      90
    251
    252	0227  50 53 51 52 06 55			     push ax bx	cx dx es bp
    253	022D  54 52 51 53 50			     push RegsPush ; printed values --------------------------------- regs push!!!
    254
    255	0232  68 B800				     push 0b800h
    256	0235  07				     pop es
    257
    258	0236  BD 06D0				     mov bp, (ScreenWidth * (FrameBegLine + 2) + (FrameBegCol +	2) + 3)	* 2
    259
    260						     ; printing
    261
    262	0239  B9 0005				     mov cx, RegsNum
    263	023C  EB 5B 90				     jmp @@IO08forClause
    264
    265	023F  EB 63 90		     @@IO08noneLong: jmp @@IO08none
    266
    267	0242  49		     @@IO08forBegin: dec cx
    268	0243  58				     pop ax
    269
    270	0244  8B D8				     mov bx, ax
    271						     ;and bx, 0f000h
    272	0246  C1 EB 0C				     shr bx, 16	- 4
    273	0249  2E: 8A 9F	0321r			     mov bl, cs:[offset	HexTable + bx]
    274	024E  26: 88 5E	00			     mov byte ptr es:[bp], bl
    275	0252  83 C5 02				     add bp, 2
    276
    277	0255  8B D8				     mov bx, ax
    278	0257  81 E3 0F00			     and bx, 00f00h
    279	025B  C1 EB 08				     shr bx, 16	- 8
    280	025E  2E: 8A 9F	0321r			     mov bl, cs:[offset	HexTable + bx]
    281	0263  26: 88 5E	00			     mov byte ptr es:[bp], bl
    282	0267  83 C5 02				     add bp, 2
    283
    284	026A  26: C6 46	00 3A			     mov byte ptr es:[bp], ':'
    285	026F  83 C5 02				     add bp, 2
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 6
prog.asm



    286
    287	0272  8B D8				     mov bx, ax
    288	0274  81 E3 00F0			     and bx, 000f0h
    289	0278  C1 EB 04				     shr bx, 16	- 12
    290	027B  2E: 8A 9F	0321r			     mov bl, cs:[offset	HexTable + bx]
    291	0280  26: 88 5E	00			     mov byte ptr es:[bp], bl
    292	0284  83 C5 02				     add bp, 2
    293
    294	0287  8B D8				     mov bx, ax
    295	0289  83 E3 0F				     and bx, 0000fh
    296						     ;shr bx, 16 - 16
    297	028C  2E: 8A 9F	0321r			     mov bl, cs:[offset	HexTable + bx]
    298	0291  26: 88 5E	00			     mov byte ptr es:[bp], bl
    299
    300	0295  81 C5 0098			     add bp, (ScreenWidth - 4) * 2
    301
    302	0299			     @@IO08forClause:
    303	0299  83 F9 00				     cmp cx, 0
    304	029C  77 A4				     ja	@@IO08forBegin
    305
    306	029E  5D 07 5A 59 5B 58			     pop bp es dx cx bx	ax
    307	02A4			     @@IO08none:
    308	02A4  EA				     db	0eah ; far jmp
    309	02A5  0000		     Old08Offs	     dw	0
    310	02A7  0000		     Old08Seg	     dw	0
    311
    312	02A9					     endp
    313
    314
    315	02A9			     IntOverride09   proc
    316
    317	02A9  50				     push ax
    318
    319	02AA  E4 60				     in	al, 60h
    320	02AC  3C 58				     cmp al, HotKeyOpenKeycode
    321	02AE  75 56				     jne @@IO09elseif
    322
    323	02B0  2E: 80 3E	0317r 00		     cmp cs:PopupCnt, 0
    324	02B6  75 59				     jne @@IO09endif
    325
    326						     ; enable frame and	draw it
    327	02B8  2E: C6 06	0317r 01  +		     mov cs:PopupCnt, 1
    328	      90
    329
    330	02BF  53 51 52 06 55			     push bx cx	dx es bp
    331
    332	02C4  68 B800				     push 0b800h
    333	02C7  07				     pop es
    334
    335	02C8  68 0318r				     push offset FrameStyle
    336	02CB  5D				     pop bp
    337	02CC  B9 090C				     mov cx, FrameHeight * 100h	+ FrameWidth
    338	02CF  B6 4E				     mov dh, 4eh     ; color
    339	02D1  E8 FE39				     call DrawFrame
    340
    341
    342	02D4  BD 06CA				     mov bp, (ScreenWidth * (FrameBegLine + 2) + (FrameBegCol +	2)) * 2
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 7
prog.asm



    343
    344	02D7  BB 0000				     mov bx, 0
    345	02DA  EB 1D 90				     jmp @@IO09forClause
    346	02DD			     @@IO09forBegin:
    347	02DD  2E: 8A 8F	0103r			     mov cl, cs:[offset	RegsNames + bx]
    348	02E2  26: 88 4E	00			     mov byte ptr es:[bp], cl
    349	02E6  83 C5 02				     add bp, 2
    350
    351	02E9  2E: 8A 8F	0104r			     mov cl, cs:[offset	RegsNames + bx + 1]
    352	02EE  26: 88 4E	00			     mov byte ptr es:[bp], cl
    353
    354	02F2  81 C5 009E			     add bp, (ScreenWidth - 1) * 2
    355
    356	02F6  83 C3 02				     add bx, 2
    357	02F9			     @@IO09forClause:
    358	02F9  83 FB 0A				     cmp bx, RegsNum * 2
    359	02FC  72 DF				     jb	@@IO09forBegin
    360
    361	02FE  5D 07 5A 59 5B			     pop bp es dx cx bx
    362
    363	0303  EB 0C 90				     jmp @@IO09endif
    364
    365	0306  3C D8		     @@IO09elseif:   cmp al, HotKeyCloseKeycode
    366	0308  75 07				     jne @@IO09endif
    367
    368	030A  2E: C6 06	0317r 00  +		     mov cs:PopupCnt, 0
    369	      90
    370	0311			     @@IO09endif:
    371	0311  58				     pop ax
    372
    373	0312  EA				     db	0eah ; far jmp
    374	0313  0000		     Old09Offs	     dw	0
    375	0315  0000		     Old09Seg	     dw	0
    376
    377	0317					     endp
    378
    379
    380	0317  00		     PopupCnt	     db	0 ; 0 -	off; >0	- on
    381
    382	0318  DA C4 BF B3 20 B3	C0+  FrameStyle	     db	0dah, 0c4h, 0bfh, 0b3h,	Space, 0b3h, 0c0h, 0c4h, 0d9h ;	single frame
    383	      C4 D9
    384
    385	0321  30 31 32 33 34 35	36+  HexTable	     db	"0123456789ABCDEF"
    386	      37 38 39 41 42 43	44+
    387	      45 46
    388
    389	0331			     EndOfProg:
    390
    391				     end	     Start
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/21/24"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "24:43:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DFLEWHILE			  Near	 DGROUP:017E
@@DFLEWHILECLAUSE		  Near	 DGROUP:0184
@@DFLWHILE			  Near	 DGROUP:01AC
@@DFLWHILECLAUSE		  Near	 DGROUP:01B2
@@DFWHILE			  Near	 DGROUP:013E
@@DFWHILECLAUSE			  Near	 DGROUP:014F
@@IO08FORBEGIN			  Near	 DGROUP:0242
@@IO08FORCLAUSE			  Near	 DGROUP:0299
@@IO08NONE			  Near	 DGROUP:02A4
@@IO08NONELONG			  Near	 DGROUP:023F
@@IO09ELSEIF			  Near	 DGROUP:0306
@@IO09ENDIF			  Near	 DGROUP:0311
@@IO09FORBEGIN			  Near	 DGROUP:02DD
@@IO09FORCLAUSE			  Near	 DGROUP:02F9
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DRAWFRAME			  Near	 DGROUP:010D
DRAWFRAMEEMPTYLINE		  Near	 DGROUP:0169
DRAWFRAMELINE			  Near	 DGROUP:0189
ENDOFPROG			  Near	 DGROUP:0331
F12PUSHKEYCODE			  Number 0058
F12RELEASEKEYCODE		  Number 00D8
FRAMEBEGCOL			  Number 0043
FRAMEBEGLINE			  Number 0008
FRAMEHEIGHT			  Number 0009
FRAMESTYLE			  Byte	 DGROUP:0318
FRAMEWIDTH			  Number 000C
HEXTABLE			  Byte	 DGROUP:0321
HOTKEYCLOSEKEYCODE		  Alias	 F12RELEASEKEYCODE
HOTKEYOPENKEYCODE		  Alias	 F12PUSHKEYCODE
INTOVERRIDE08			  Near	 DGROUP:020B
INTOVERRIDE09			  Near	 DGROUP:02A9
MAIN				  Near	 DGROUP:01C9
OLD08OFFS			  Word	 DGROUP:02A5
OLD08SEG			  Word	 DGROUP:02A7
OLD09OFFS			  Word	 DGROUP:0313
OLD09SEG			  Word	 DGROUP:0315
POPUPCNT			  Byte	 DGROUP:0317
REGSNAMES			  Byte	 DGROUP:0103
REGSNUM				  Number 0005
Turbo Assembler	 Version 4.1	    02/21/24 24:43:07	    Page 9
Symbol Table



REGSPUSH			  Text	 sp dx cx bx ax
SCREENHEIGHT			  Number 001A
SCREENWIDTH			  Number 0050
SPACE				  Number 0020
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0331 Word	  Public  CODE
